# coding: utf-8

"""
    Yanshee RESTful API

     ## Overview Yanshee RESTful APIs are generated by the [swagger-codegen](https://github.com/swagger-api/swagger-codegen) project. By using the [OpenAPI-Spec](https://github.com/swagger-api/swagger-core/wiki) from a remote server. The API service uses the [Connexion](https://github.com/zalando/connexion) library on top of Flask.  To provide the API service, Yanshee RESTful APIs are integrated into apollo package, it is a part of Yanshee-ROS framework. Yanshee RESTful APIs provided two language versions: - [English version](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_en/1.0.0) - [Chinese version](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_cn/1.0.0)  ## Requirements. Python 2.7 or 3.4+  ## Getting Started Please follow the [installation procedure](#installation--usage) and then run the following:  ``` from __future__ import print_function import time import openadk from openadk.rest import ApiException from pprint import pprint  # create an instance of the API class configuration = openadk.Configuration() configuration.host = 'http://192.168.1.100:9090/v1' api_instance = openadk.DevicesApi(openadk.ApiClient(configuration)) try:  # Get system's battery information  api_response = api_instance.get_devices_battery()  pprint(api_response) except ApiException as e:  print(\"Exception when calling DevicesApi->get_devices_battery: %s\" % e)  ```   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: swenggroup@ubtrobot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SensorsParameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id': 'int',
        'value': 'int'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'value': 'value'
    }

    def __init__(self, type='gyro', id=None, value=None):  # noqa: E501
        """SensorsParameter - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._id = None
        self._value = None
        self.discriminator = None

        self.type = type
        self.id = id
        if value is not None:
            self.value = value

    @property
    def type(self):
        """Gets the type of this SensorsParameter.  # noqa: E501

         All sensors' type: - gyro    gyroscope sensor - infrared    infrared sensor - ultrasonic    ultrasonic sensor - touch   touch sensor - pressure  pressure sensor   # noqa: E501

        :return: The type of this SensorsParameter.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SensorsParameter.

         All sensors' type: - gyro    gyroscope sensor - infrared    infrared sensor - ultrasonic    ultrasonic sensor - touch   touch sensor - pressure  pressure sensor   # noqa: E501

        :param type: The type of this SensorsParameter.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["gyro", "infrared", "ultrasonic", "touch", "pressure"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """Gets the id of this SensorsParameter.  # noqa: E501


        :return: The id of this SensorsParameter.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SensorsParameter.


        :param id: The id of this SensorsParameter.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if id is not None and id > 127:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value less than or equal to `127`")  # noqa: E501
        if id is not None and id < 1:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def value(self):
        """Gets the value of this SensorsParameter.  # noqa: E501

         When \"operation\" is \"calibrate\", ignore this field. When \"operation\" is \"modify\", it means setting the sensor's I2C address. Please note, when the slot value is exist, \"modify\" is not available.  All the sensor I2C address range as below: - Ultrasonic sensor   17~22; - Infrared sensor     23~28; - Touch sensor        29~34; - Pressure Sensor     35~40;   # noqa: E501

        :return: The value of this SensorsParameter.  # noqa: E501
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SensorsParameter.

         When \"operation\" is \"calibrate\", ignore this field. When \"operation\" is \"modify\", it means setting the sensor's I2C address. Please note, when the slot value is exist, \"modify\" is not available.  All the sensor I2C address range as below: - Ultrasonic sensor   17~22; - Infrared sensor     23~28; - Touch sensor        29~34; - Pressure Sensor     35~40;   # noqa: E501

        :param value: The value of this SensorsParameter.  # noqa: E501
        :type: int
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SensorsParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SensorsParameter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
