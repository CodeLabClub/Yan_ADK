# coding: utf-8

"""
    Yanshee RESTful API

    Yanshee RESTful APIs是一套专门为编程爱好者提供二次开发的接口．它通过http/https的方式向外界提供机器人控制，传感器读取，机器人视觉等功能．用户还可以通过编程的方式训练自己的模型，学习一些机器学习的内容．  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: swenggroup@ubtrobot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VisionsExpression(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'happiness': 'float',
        'surprise': 'float',
        'anger': 'float',
        'sadness': 'float',
        'neutral': 'float',
        'fear': 'float'
    }

    attribute_map = {
        'happiness': 'happiness',
        'surprise': 'surprise',
        'anger': 'anger',
        'sadness': 'sadness',
        'neutral': 'neutral',
        'fear': 'fear'
    }

    def __init__(self, happiness=None, surprise=None, anger=None, sadness=None, neutral=None, fear=None):  # noqa: E501
        """VisionsExpression - a model defined in Swagger"""  # noqa: E501

        self._happiness = None
        self._surprise = None
        self._anger = None
        self._sadness = None
        self._neutral = None
        self._fear = None
        self.discriminator = None

        self.happiness = happiness
        self.surprise = surprise
        self.anger = anger
        self.sadness = sadness
        self.neutral = neutral
        self.fear = fear

    @property
    def happiness(self):
        """Gets the happiness of this VisionsExpression.  # noqa: E501

        快乐值, 0 ~ 100 (浮点数)  # noqa: E501

        :return: The happiness of this VisionsExpression.  # noqa: E501
        :rtype: float
        """
        return self._happiness

    @happiness.setter
    def happiness(self, happiness):
        """Sets the happiness of this VisionsExpression.

        快乐值, 0 ~ 100 (浮点数)  # noqa: E501

        :param happiness: The happiness of this VisionsExpression.  # noqa: E501
        :type: float
        """
        if happiness is None:
            raise ValueError("Invalid value for `happiness`, must not be `None`")  # noqa: E501
        if happiness is not None and happiness > 100:  # noqa: E501
            raise ValueError("Invalid value for `happiness`, must be a value less than or equal to `100`")  # noqa: E501
        if happiness is not None and happiness < 0:  # noqa: E501
            raise ValueError("Invalid value for `happiness`, must be a value greater than or equal to `0`")  # noqa: E501

        self._happiness = happiness

    @property
    def surprise(self):
        """Gets the surprise of this VisionsExpression.  # noqa: E501

        吃惊值, 0 ~ 100 (浮点数)  # noqa: E501

        :return: The surprise of this VisionsExpression.  # noqa: E501
        :rtype: float
        """
        return self._surprise

    @surprise.setter
    def surprise(self, surprise):
        """Sets the surprise of this VisionsExpression.

        吃惊值, 0 ~ 100 (浮点数)  # noqa: E501

        :param surprise: The surprise of this VisionsExpression.  # noqa: E501
        :type: float
        """
        if surprise is None:
            raise ValueError("Invalid value for `surprise`, must not be `None`")  # noqa: E501
        if surprise is not None and surprise > 100:  # noqa: E501
            raise ValueError("Invalid value for `surprise`, must be a value less than or equal to `100`")  # noqa: E501
        if surprise is not None and surprise < 0:  # noqa: E501
            raise ValueError("Invalid value for `surprise`, must be a value greater than or equal to `0`")  # noqa: E501

        self._surprise = surprise

    @property
    def anger(self):
        """Gets the anger of this VisionsExpression.  # noqa: E501

        生气值, 0 ~ 100 (浮点数)  # noqa: E501

        :return: The anger of this VisionsExpression.  # noqa: E501
        :rtype: float
        """
        return self._anger

    @anger.setter
    def anger(self, anger):
        """Sets the anger of this VisionsExpression.

        生气值, 0 ~ 100 (浮点数)  # noqa: E501

        :param anger: The anger of this VisionsExpression.  # noqa: E501
        :type: float
        """
        if anger is None:
            raise ValueError("Invalid value for `anger`, must not be `None`")  # noqa: E501
        if anger is not None and anger > 100:  # noqa: E501
            raise ValueError("Invalid value for `anger`, must be a value less than or equal to `100`")  # noqa: E501
        if anger is not None and anger < 0:  # noqa: E501
            raise ValueError("Invalid value for `anger`, must be a value greater than or equal to `0`")  # noqa: E501

        self._anger = anger

    @property
    def sadness(self):
        """Gets the sadness of this VisionsExpression.  # noqa: E501

        伤心值, 0 ~ 100 (浮点数)  # noqa: E501

        :return: The sadness of this VisionsExpression.  # noqa: E501
        :rtype: float
        """
        return self._sadness

    @sadness.setter
    def sadness(self, sadness):
        """Sets the sadness of this VisionsExpression.

        伤心值, 0 ~ 100 (浮点数)  # noqa: E501

        :param sadness: The sadness of this VisionsExpression.  # noqa: E501
        :type: float
        """
        if sadness is None:
            raise ValueError("Invalid value for `sadness`, must not be `None`")  # noqa: E501
        if sadness is not None and sadness > 100:  # noqa: E501
            raise ValueError("Invalid value for `sadness`, must be a value less than or equal to `100`")  # noqa: E501
        if sadness is not None and sadness < 0:  # noqa: E501
            raise ValueError("Invalid value for `sadness`, must be a value greater than or equal to `0`")  # noqa: E501

        self._sadness = sadness

    @property
    def neutral(self):
        """Gets the neutral of this VisionsExpression.  # noqa: E501

        平静值, 0 ~ 100 (浮点数)  # noqa: E501

        :return: The neutral of this VisionsExpression.  # noqa: E501
        :rtype: float
        """
        return self._neutral

    @neutral.setter
    def neutral(self, neutral):
        """Sets the neutral of this VisionsExpression.

        平静值, 0 ~ 100 (浮点数)  # noqa: E501

        :param neutral: The neutral of this VisionsExpression.  # noqa: E501
        :type: float
        """
        if neutral is None:
            raise ValueError("Invalid value for `neutral`, must not be `None`")  # noqa: E501
        if neutral is not None and neutral > 100:  # noqa: E501
            raise ValueError("Invalid value for `neutral`, must be a value less than or equal to `100`")  # noqa: E501
        if neutral is not None and neutral < 0:  # noqa: E501
            raise ValueError("Invalid value for `neutral`, must be a value greater than or equal to `0`")  # noqa: E501

        self._neutral = neutral

    @property
    def fear(self):
        """Gets the fear of this VisionsExpression.  # noqa: E501

        害怕值, 0 ~ 100 (浮点数)  # noqa: E501

        :return: The fear of this VisionsExpression.  # noqa: E501
        :rtype: float
        """
        return self._fear

    @fear.setter
    def fear(self, fear):
        """Sets the fear of this VisionsExpression.

        害怕值, 0 ~ 100 (浮点数)  # noqa: E501

        :param fear: The fear of this VisionsExpression.  # noqa: E501
        :type: float
        """
        if fear is None:
            raise ValueError("Invalid value for `fear`, must not be `None`")  # noqa: E501
        if fear is not None and fear > 100:  # noqa: E501
            raise ValueError("Invalid value for `fear`, must be a value less than or equal to `100`")  # noqa: E501
        if fear is not None and fear < 0:  # noqa: E501
            raise ValueError("Invalid value for `fear`, must be a value greater than or equal to `0`")  # noqa: E501

        self._fear = fear

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VisionsExpression, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VisionsExpression):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
