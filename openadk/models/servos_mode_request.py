# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openadk.models.base_model_ import Model
from openadk.models.servos_list import ServosList  # noqa: F401,E501
from openadk import util


class ServosModeRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, mode=None, servos=None):  # noqa: E501
        """ServosModeRequest - a model defined in Swagger

        :param mode: The mode of this ServosModeRequest.  # noqa: E501
        :type mode: str
        :param servos: The servos of this ServosModeRequest.  # noqa: E501
        :type servos: List[ServosList]
        """
        self.swagger_types = {
            'mode': str,
            'servos': List[ServosList]
        }

        self.attribute_map = {
            'mode': 'mode',
            'servos': 'servos'
        }

        self._mode = mode
        self._servos = servos

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServosModeRequest of this ServosModeRequest.  # noqa: E501
        :rtype: ServosModeRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mode(self):
        """Gets the mode of this ServosModeRequest.

        模式取值：work（工作模式）和program（编程模式）  # noqa: E501

        :return: The mode of this ServosModeRequest.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this ServosModeRequest.

        模式取值：work（工作模式）和program（编程模式）  # noqa: E501

        :param mode: The mode of this ServosModeRequest.
        :type mode: str
        """
        allowed_values = ["work", "program"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def servos(self):
        """Gets the servos of this ServosModeRequest.


        :return: The servos of this ServosModeRequest.
        :rtype: List[ServosList]
        """
        return self._servos

    @servos.setter
    def servos(self, servos):
        """Sets the servos of this ServosModeRequest.


        :param servos: The servos of this ServosModeRequest.
        :type servos: List[ServosList]
        """
        if servos is None:
            raise ValueError("Invalid value for `servos`, must not be `None`")  # noqa: E501

        self._servos = servos
