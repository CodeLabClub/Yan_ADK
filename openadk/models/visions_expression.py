# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openadk.models.base_model_ import Model
from openadk import util


class VisionsExpression(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, happiness=None, surprise=None, anger=None, sadness=None, neutral=None, fear=None):  # noqa: E501
        """VisionsExpression - a model defined in Swagger

        :param happiness: The happiness of this VisionsExpression.  # noqa: E501
        :type happiness: float
        :param surprise: The surprise of this VisionsExpression.  # noqa: E501
        :type surprise: float
        :param anger: The anger of this VisionsExpression.  # noqa: E501
        :type anger: float
        :param sadness: The sadness of this VisionsExpression.  # noqa: E501
        :type sadness: float
        :param neutral: The neutral of this VisionsExpression.  # noqa: E501
        :type neutral: float
        :param fear: The fear of this VisionsExpression.  # noqa: E501
        :type fear: float
        """
        self.swagger_types = {
            'happiness': float,
            'surprise': float,
            'anger': float,
            'sadness': float,
            'neutral': float,
            'fear': float
        }

        self.attribute_map = {
            'happiness': 'happiness',
            'surprise': 'surprise',
            'anger': 'anger',
            'sadness': 'sadness',
            'neutral': 'neutral',
            'fear': 'fear'
        }

        self._happiness = happiness
        self._surprise = surprise
        self._anger = anger
        self._sadness = sadness
        self._neutral = neutral
        self._fear = fear

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VisionsExpression of this VisionsExpression.  # noqa: E501
        :rtype: VisionsExpression
        """
        return util.deserialize_model(dikt, cls)

    @property
    def happiness(self):
        """Gets the happiness of this VisionsExpression.

        快乐值, 0 ~ 100 (浮点数)  # noqa: E501

        :return: The happiness of this VisionsExpression.
        :rtype: float
        """
        return self._happiness

    @happiness.setter
    def happiness(self, happiness):
        """Sets the happiness of this VisionsExpression.

        快乐值, 0 ~ 100 (浮点数)  # noqa: E501

        :param happiness: The happiness of this VisionsExpression.
        :type happiness: float
        """
        if happiness is None:
            raise ValueError("Invalid value for `happiness`, must not be `None`")  # noqa: E501
        if happiness is not None and happiness > 100:  # noqa: E501
            raise ValueError("Invalid value for `happiness`, must be a value less than or equal to `100`")  # noqa: E501
        if happiness is not None and happiness < 0:  # noqa: E501
            raise ValueError("Invalid value for `happiness`, must be a value greater than or equal to `0`")  # noqa: E501

        self._happiness = happiness

    @property
    def surprise(self):
        """Gets the surprise of this VisionsExpression.

        吃惊值, 0 ~ 100 (浮点数)  # noqa: E501

        :return: The surprise of this VisionsExpression.
        :rtype: float
        """
        return self._surprise

    @surprise.setter
    def surprise(self, surprise):
        """Sets the surprise of this VisionsExpression.

        吃惊值, 0 ~ 100 (浮点数)  # noqa: E501

        :param surprise: The surprise of this VisionsExpression.
        :type surprise: float
        """
        if surprise is None:
            raise ValueError("Invalid value for `surprise`, must not be `None`")  # noqa: E501
        if surprise is not None and surprise > 100:  # noqa: E501
            raise ValueError("Invalid value for `surprise`, must be a value less than or equal to `100`")  # noqa: E501
        if surprise is not None and surprise < 0:  # noqa: E501
            raise ValueError("Invalid value for `surprise`, must be a value greater than or equal to `0`")  # noqa: E501

        self._surprise = surprise

    @property
    def anger(self):
        """Gets the anger of this VisionsExpression.

        生气值, 0 ~ 100 (浮点数)  # noqa: E501

        :return: The anger of this VisionsExpression.
        :rtype: float
        """
        return self._anger

    @anger.setter
    def anger(self, anger):
        """Sets the anger of this VisionsExpression.

        生气值, 0 ~ 100 (浮点数)  # noqa: E501

        :param anger: The anger of this VisionsExpression.
        :type anger: float
        """
        if anger is None:
            raise ValueError("Invalid value for `anger`, must not be `None`")  # noqa: E501
        if anger is not None and anger > 100:  # noqa: E501
            raise ValueError("Invalid value for `anger`, must be a value less than or equal to `100`")  # noqa: E501
        if anger is not None and anger < 0:  # noqa: E501
            raise ValueError("Invalid value for `anger`, must be a value greater than or equal to `0`")  # noqa: E501

        self._anger = anger

    @property
    def sadness(self):
        """Gets the sadness of this VisionsExpression.

        伤心值, 0 ~ 100 (浮点数)  # noqa: E501

        :return: The sadness of this VisionsExpression.
        :rtype: float
        """
        return self._sadness

    @sadness.setter
    def sadness(self, sadness):
        """Sets the sadness of this VisionsExpression.

        伤心值, 0 ~ 100 (浮点数)  # noqa: E501

        :param sadness: The sadness of this VisionsExpression.
        :type sadness: float
        """
        if sadness is None:
            raise ValueError("Invalid value for `sadness`, must not be `None`")  # noqa: E501
        if sadness is not None and sadness > 100:  # noqa: E501
            raise ValueError("Invalid value for `sadness`, must be a value less than or equal to `100`")  # noqa: E501
        if sadness is not None and sadness < 0:  # noqa: E501
            raise ValueError("Invalid value for `sadness`, must be a value greater than or equal to `0`")  # noqa: E501

        self._sadness = sadness

    @property
    def neutral(self):
        """Gets the neutral of this VisionsExpression.

        平静值, 0 ~ 100 (浮点数)  # noqa: E501

        :return: The neutral of this VisionsExpression.
        :rtype: float
        """
        return self._neutral

    @neutral.setter
    def neutral(self, neutral):
        """Sets the neutral of this VisionsExpression.

        平静值, 0 ~ 100 (浮点数)  # noqa: E501

        :param neutral: The neutral of this VisionsExpression.
        :type neutral: float
        """
        if neutral is None:
            raise ValueError("Invalid value for `neutral`, must not be `None`")  # noqa: E501
        if neutral is not None and neutral > 100:  # noqa: E501
            raise ValueError("Invalid value for `neutral`, must be a value less than or equal to `100`")  # noqa: E501
        if neutral is not None and neutral < 0:  # noqa: E501
            raise ValueError("Invalid value for `neutral`, must be a value greater than or equal to `0`")  # noqa: E501

        self._neutral = neutral

    @property
    def fear(self):
        """Gets the fear of this VisionsExpression.

        害怕值, 0 ~ 100 (浮点数)  # noqa: E501

        :return: The fear of this VisionsExpression.
        :rtype: float
        """
        return self._fear

    @fear.setter
    def fear(self, fear):
        """Sets the fear of this VisionsExpression.

        害怕值, 0 ~ 100 (浮点数)  # noqa: E501

        :param fear: The fear of this VisionsExpression.
        :type fear: float
        """
        if fear is None:
            raise ValueError("Invalid value for `fear`, must not be `None`")  # noqa: E501
        if fear is not None and fear > 100:  # noqa: E501
            raise ValueError("Invalid value for `fear`, must be a value less than or equal to `100`")  # noqa: E501
        if fear is not None and fear < 0:  # noqa: E501
            raise ValueError("Invalid value for `fear`, must be a value greater than or equal to `0`")  # noqa: E501

        self._fear = fear
