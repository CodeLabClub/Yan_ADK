# coding: utf-8

"""
    Yanshee RESTful API

     ## Overview Yanshee RESTful APIs are generated by the [swagger-codegen](https://github.com/swagger-api/swagger-codegen) project. By using the [OpenAPI-Spec](https://github.com/swagger-api/swagger-core/wiki) from a remote server. The API service uses the [Connexion](https://github.com/zalando/connexion) library on top of Flask.  To provide the API service, Yanshee RESTful APIs are integrated into apollo package, it is a part of Yanshee-ROS framework. Yanshee RESTful APIs provided two language versions: - [English version](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_en/1.0.0) - [Chinese version](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_cn/1.0.0)  ## Requirements. Python 2.7 or 3.4+  ## Getting Started Please follow the [installation procedure](#installation--usage) and then run the following:  ``` from __future__ import print_function import time import openadk from openadk.rest import ApiException from pprint import pprint  # create an instance of the API class configuration = openadk.Configuration() configuration.host = 'http://192.168.1.100:9090/v1' api_instance = openadk.DevicesApi(openadk.ApiClient(configuration)) try:  # Get system's battery information  api_response = api_instance.get_devices_battery()  pprint(api_response) except ApiException as e:  print(\"Exception when calling DevicesApi->get_devices_battery: %s\" % e)  ```   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: swenggroup@ubtrobot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import unittest

import openadk
from openadk.api.servos_api import ServosApi  # noqa: E501
from openadk.rest import ApiException

import time
from openadk.models.servos_angles_request import ServosAnglesRequest
from openadk.models.servos_mode_request import ServosModeRequest
from openadk.models.servos_angles import ServosAngles
from openadk.models.servos_list import ServosList


class TestServosApi(unittest.TestCase):
    """ServosApi unit test stubs"""

    def setUp(self):
        self.configuration = openadk.Configuration()
        self.configuration.host = 'http://10.10.63.105:9090/v1'
        self.api_instance = ServosApi(openadk.ApiClient(self.configuration))  # noqa: E501

    def tearDown(self):
        pass

    def test_get_servos_angles(self):
        """Test case for get_servos_angles

        Get servos' angle  # noqa: E501
        """
        common_range = range(180+1)
        neck_range = range(45, 135+1)
        names = ["LeftAnkleFB",
                 "LeftAnkleUD",
                 "LeftElbowFlex",
                 "LeftHipFB",
                 "LeftHipLR",
                 "LeftKneeFlex",
                 "LeftShoulderFlex",
                 "LeftShoulderRoll",
                 "NeckLR",
                 "RightAnkleFB",
                 "RightAnkleUD",
                 "RightElbowFlex",
                 "RightHipFB",
                 "RightHipLR",
                 "RightKneeFlex",
                 "RightShoulderFlex",
                 "RightShoulderRoll"]
        ret = self.api_instance.get_servos_angles(names=names)  # return ServosAnglesResponse instance
        self.assertEqual(ret.code, 0, ret)
        for k, v in ret.data.to_dict().items():
            if k != 'NeckLR':
                self.assertIn(v, common_range, ret)
            else:
                self.assertIn(v, neck_range, ret)

    def test_get_servos_mode(self):
        """Test case for get_servos_mode

        Get servos working mode  # noqa: E501
        """
        modes = ['work', 'program', 'unknown', 'nonsupport']
        names = ["LeftAnkleFB",
                 "LeftAnkleUD",
                 "LeftElbowFlex",
                 "LeftHipFB",
                 "LeftHipLR",
                 "LeftKneeFlex",
                 "LeftShoulderFlex",
                 "LeftShoulderRoll",
                 "NeckLR",
                 "RightAnkleFB",
                 "RightAnkleUD",
                 "RightElbowFlex",
                 "RightHipFB",
                 "RightHipLR",
                 "RightKneeFlex",
                 "RightShoulderFlex",
                 "RightShoulderRoll"]
        ret = self.api_instance.get_servos_mode(names=names)    # return ServosModeResponse instance
        self.assertEqual(ret.code, 0, ret)
        for value in ret.data.to_dict().values():
            self.assertIn(value, modes, ret)

    def test_put_servos_angles(self):
        """Test case for put_servos_angles

        Set servos' angle  # noqa: E501
        """
        names = ["LeftAnkleFB",
                 "LeftAnkleUD",
                 "LeftElbowFlex",
                 "LeftHipFB",
                 "LeftHipLR",
                 "LeftKneeFlex",
                 "LeftShoulderFlex",
                 "LeftShoulderRoll",
                 "NeckLR",
                 "RightAnkleFB",
                 "RightAnkleUD",
                 "RightElbowFlex",
                 "RightHipFB",
                 "RightHipLR",
                 "RightKneeFlex",
                 "RightShoulderFlex",
                 "RightShoulderRoll"]
        ret = self.api_instance.get_servos_angles(names=names)  # return ServosAnglesResponse instance
        self.assertEqual(ret.code, 0, ret)
        angles = ServosAngles()
        for k, v in ret.data.to_dict().items():
            angles.__setattr__(k, v)
            body = ServosAnglesRequest(runtime=1000, angles=angles)
            ret = self.api_instance.put_servos_angles(body=body)  # return ServosResultResponse instance
            self.assertEqual(ret.code, 0, ret)
            self.assertEqual(ret.data.to_dict()[k], True, ret)

    def test_put_servos_mode(self):
        """Test case for put_servos_mode

        Set the servos working mode  # noqa: E501
        """
        names = ["LeftAnkleFB",
                 "LeftAnkleUD",
                 "LeftElbowFlex",
                 "LeftHipFB",
                 "LeftHipLR",
                 "LeftKneeFlex",
                 "LeftShoulderFlex",
                 "LeftShoulderRoll",
                 "NeckLR",
                 "RightAnkleFB",
                 "RightAnkleUD",
                 "RightElbowFlex",
                 "RightHipFB",
                 "RightHipLR",
                 "RightKneeFlex",
                 "RightShoulderFlex",
                 "RightShoulderRoll"]
        servos = []
        for name in names:
            servo = ServosList(name=name)
            servos.append(servo)

        modes = ['program', 'work']
        for mode in modes:
            body = ServosModeRequest(mode=mode, servos=servos)
            ret = self.api_instance.put_servos_mode(body=body)  # return ServosResultResponse instance
            self.assertEqual(ret.code, 0, ret)
            for k, v in ret.data.to_dict().items():
                self.assertEqual(v, True, ret)
            time.sleep(5.0)


if __name__ == '__main__':
    unittest.main()
