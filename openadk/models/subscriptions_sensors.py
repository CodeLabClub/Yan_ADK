# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openadk.models.base_model_ import Model
from openadk import util


class SubscriptionsSensors(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, type=None, id=None, url=None, timeout=10, timeval=1000):  # noqa: E501
        """SubscriptionsSensors - a model defined in Swagger

        :param type: The type of this SubscriptionsSensors.  # noqa: E501
        :type type: str
        :param id: The id of this SubscriptionsSensors.  # noqa: E501
        :type id: int
        :param url: The url of this SubscriptionsSensors.  # noqa: E501
        :type url: str
        :param timeout: The timeout of this SubscriptionsSensors.  # noqa: E501
        :type timeout: int
        :param timeval: The timeval of this SubscriptionsSensors.  # noqa: E501
        :type timeval: int
        """
        self.swagger_types = {
            'type': str,
            'id': int,
            'url': str,
            'timeout': int,
            'timeval': int
        }

        self.attribute_map = {
            'type': 'type',
            'id': 'id',
            'url': 'url',
            'timeout': 'timeout',
            'timeval': 'timeval'
        }

        self._type = type
        self._id = id
        self._url = url
        self._timeout = timeout
        self._timeval = timeval

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SubscriptionsSensors of this SubscriptionsSensors.  # noqa: E501
        :rtype: SubscriptionsSensors
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this SubscriptionsSensors.

        传感器类型  # noqa: E501

        :return: The type of this SubscriptionsSensors.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SubscriptionsSensors.

        传感器类型  # noqa: E501

        :param type: The type of this SubscriptionsSensors.
        :type type: str
        """
        allowed_values = ["gyro", "ultrasonic", "environment", "infrared", "touch", "pressure"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """Gets the id of this SubscriptionsSensors.

        传感器ID，可不填  # noqa: E501

        :return: The id of this SubscriptionsSensors.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubscriptionsSensors.

        传感器ID，可不填  # noqa: E501

        :param id: The id of this SubscriptionsSensors.
        :type id: int
        """
        if id is not None and id > 126:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value less than or equal to `126`")  # noqa: E501
        if id is not None and id < 1:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def url(self):
        """Gets the url of this SubscriptionsSensors.

        接口信息  # noqa: E501

        :return: The url of this SubscriptionsSensors.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SubscriptionsSensors.

        接口信息  # noqa: E501

        :param url: The url of this SubscriptionsSensors.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def timeout(self):
        """Gets the timeout of this SubscriptionsSensors.

        超时停止发送的时间  # noqa: E501

        :return: The timeout of this SubscriptionsSensors.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this SubscriptionsSensors.

        超时停止发送的时间  # noqa: E501

        :param timeout: The timeout of this SubscriptionsSensors.
        :type timeout: int
        """
        if timeout is not None and timeout > 60:  # noqa: E501
            raise ValueError("Invalid value for `timeout`, must be a value less than or equal to `60`")  # noqa: E501
        if timeout is not None and timeout < 1:  # noqa: E501
            raise ValueError("Invalid value for `timeout`, must be a value greater than or equal to `1`")  # noqa: E501

        self._timeout = timeout

    @property
    def timeval(self):
        """Gets the timeval of this SubscriptionsSensors.

        上报的最短时间间隔，单位ms（豪秒）  # noqa: E501

        :return: The timeval of this SubscriptionsSensors.
        :rtype: int
        """
        return self._timeval

    @timeval.setter
    def timeval(self, timeval):
        """Sets the timeval of this SubscriptionsSensors.

        上报的最短时间间隔，单位ms（豪秒）  # noqa: E501

        :param timeval: The timeval of this SubscriptionsSensors.
        :type timeval: int
        """
        if timeval is not None and timeval > 5000:  # noqa: E501
            raise ValueError("Invalid value for `timeval`, must be a value less than or equal to `5000`")  # noqa: E501
        if timeval is not None and timeval < 100:  # noqa: E501
            raise ValueError("Invalid value for `timeval`, must be a value greater than or equal to `100`")  # noqa: E501

        self._timeval = timeval
