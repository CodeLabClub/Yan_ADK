# coding: utf-8

"""
    Yanshee RESTful API

    Yanshee RESTful APIs是一套专门为编程爱好者提供二次开发的接口．它通过http/https的方式向外界提供机器人控制，传感器读取，机器人视觉等功能．用户还可以通过编程的方式训练自己的模型，学习一些机器学习的内容．  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: swenggroup@ubtrobot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SensorsGyroInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'gyro_x': 'float',
        'gyro_y': 'float',
        'gyro_z': 'float',
        'accel_x': 'float',
        'accel_y': 'float',
        'accel_z': 'float',
        'compass_x': 'float',
        'compass_y': 'float',
        'compass_z': 'float',
        'euler_x': 'float',
        'euler_y': 'float',
        'euler_z': 'float'
    }

    attribute_map = {
        'id': 'id',
        'gyro_x': 'gyro-x',
        'gyro_y': 'gyro-y',
        'gyro_z': 'gyro-z',
        'accel_x': 'accel-x',
        'accel_y': 'accel-y',
        'accel_z': 'accel-z',
        'compass_x': 'compass-x',
        'compass_y': 'compass-y',
        'compass_z': 'compass-z',
        'euler_x': 'euler-x',
        'euler_y': 'euler-y',
        'euler_z': 'euler-z'
    }

    def __init__(self, id=None, gyro_x=None, gyro_y=None, gyro_z=None, accel_x=None, accel_y=None, accel_z=None, compass_x=None, compass_y=None, compass_z=None, euler_x=None, euler_y=None, euler_z=None):  # noqa: E501
        """SensorsGyroInfo - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._gyro_x = None
        self._gyro_y = None
        self._gyro_z = None
        self._accel_x = None
        self._accel_y = None
        self._accel_z = None
        self._compass_x = None
        self._compass_y = None
        self._compass_z = None
        self._euler_x = None
        self._euler_y = None
        self._euler_z = None
        self.discriminator = None

        self.id = id
        if gyro_x is not None:
            self.gyro_x = gyro_x
        if gyro_y is not None:
            self.gyro_y = gyro_y
        if gyro_z is not None:
            self.gyro_z = gyro_z
        if accel_x is not None:
            self.accel_x = accel_x
        if accel_y is not None:
            self.accel_y = accel_y
        if accel_z is not None:
            self.accel_z = accel_z
        if compass_x is not None:
            self.compass_x = compass_x
        if compass_y is not None:
            self.compass_y = compass_y
        if compass_z is not None:
            self.compass_z = compass_z
        self.euler_x = euler_x
        self.euler_y = euler_y
        self.euler_z = euler_z

    @property
    def id(self):
        """Gets the id of this SensorsGyroInfo.  # noqa: E501


        :return: The id of this SensorsGyroInfo.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SensorsGyroInfo.


        :param id: The id of this SensorsGyroInfo.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if id is not None and id > 127:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value less than or equal to `127`")  # noqa: E501
        if id is not None and id < 1:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def gyro_x(self):
        """Gets the gyro_x of this SensorsGyroInfo.  # noqa: E501


        :return: The gyro_x of this SensorsGyroInfo.  # noqa: E501
        :rtype: float
        """
        return self._gyro_x

    @gyro_x.setter
    def gyro_x(self, gyro_x):
        """Sets the gyro_x of this SensorsGyroInfo.


        :param gyro_x: The gyro_x of this SensorsGyroInfo.  # noqa: E501
        :type: float
        """

        self._gyro_x = gyro_x

    @property
    def gyro_y(self):
        """Gets the gyro_y of this SensorsGyroInfo.  # noqa: E501


        :return: The gyro_y of this SensorsGyroInfo.  # noqa: E501
        :rtype: float
        """
        return self._gyro_y

    @gyro_y.setter
    def gyro_y(self, gyro_y):
        """Sets the gyro_y of this SensorsGyroInfo.


        :param gyro_y: The gyro_y of this SensorsGyroInfo.  # noqa: E501
        :type: float
        """

        self._gyro_y = gyro_y

    @property
    def gyro_z(self):
        """Gets the gyro_z of this SensorsGyroInfo.  # noqa: E501


        :return: The gyro_z of this SensorsGyroInfo.  # noqa: E501
        :rtype: float
        """
        return self._gyro_z

    @gyro_z.setter
    def gyro_z(self, gyro_z):
        """Sets the gyro_z of this SensorsGyroInfo.


        :param gyro_z: The gyro_z of this SensorsGyroInfo.  # noqa: E501
        :type: float
        """

        self._gyro_z = gyro_z

    @property
    def accel_x(self):
        """Gets the accel_x of this SensorsGyroInfo.  # noqa: E501


        :return: The accel_x of this SensorsGyroInfo.  # noqa: E501
        :rtype: float
        """
        return self._accel_x

    @accel_x.setter
    def accel_x(self, accel_x):
        """Sets the accel_x of this SensorsGyroInfo.


        :param accel_x: The accel_x of this SensorsGyroInfo.  # noqa: E501
        :type: float
        """

        self._accel_x = accel_x

    @property
    def accel_y(self):
        """Gets the accel_y of this SensorsGyroInfo.  # noqa: E501


        :return: The accel_y of this SensorsGyroInfo.  # noqa: E501
        :rtype: float
        """
        return self._accel_y

    @accel_y.setter
    def accel_y(self, accel_y):
        """Sets the accel_y of this SensorsGyroInfo.


        :param accel_y: The accel_y of this SensorsGyroInfo.  # noqa: E501
        :type: float
        """

        self._accel_y = accel_y

    @property
    def accel_z(self):
        """Gets the accel_z of this SensorsGyroInfo.  # noqa: E501


        :return: The accel_z of this SensorsGyroInfo.  # noqa: E501
        :rtype: float
        """
        return self._accel_z

    @accel_z.setter
    def accel_z(self, accel_z):
        """Sets the accel_z of this SensorsGyroInfo.


        :param accel_z: The accel_z of this SensorsGyroInfo.  # noqa: E501
        :type: float
        """

        self._accel_z = accel_z

    @property
    def compass_x(self):
        """Gets the compass_x of this SensorsGyroInfo.  # noqa: E501


        :return: The compass_x of this SensorsGyroInfo.  # noqa: E501
        :rtype: float
        """
        return self._compass_x

    @compass_x.setter
    def compass_x(self, compass_x):
        """Sets the compass_x of this SensorsGyroInfo.


        :param compass_x: The compass_x of this SensorsGyroInfo.  # noqa: E501
        :type: float
        """

        self._compass_x = compass_x

    @property
    def compass_y(self):
        """Gets the compass_y of this SensorsGyroInfo.  # noqa: E501


        :return: The compass_y of this SensorsGyroInfo.  # noqa: E501
        :rtype: float
        """
        return self._compass_y

    @compass_y.setter
    def compass_y(self, compass_y):
        """Sets the compass_y of this SensorsGyroInfo.


        :param compass_y: The compass_y of this SensorsGyroInfo.  # noqa: E501
        :type: float
        """

        self._compass_y = compass_y

    @property
    def compass_z(self):
        """Gets the compass_z of this SensorsGyroInfo.  # noqa: E501


        :return: The compass_z of this SensorsGyroInfo.  # noqa: E501
        :rtype: float
        """
        return self._compass_z

    @compass_z.setter
    def compass_z(self, compass_z):
        """Sets the compass_z of this SensorsGyroInfo.


        :param compass_z: The compass_z of this SensorsGyroInfo.  # noqa: E501
        :type: float
        """

        self._compass_z = compass_z

    @property
    def euler_x(self):
        """Gets the euler_x of this SensorsGyroInfo.  # noqa: E501


        :return: The euler_x of this SensorsGyroInfo.  # noqa: E501
        :rtype: float
        """
        return self._euler_x

    @euler_x.setter
    def euler_x(self, euler_x):
        """Sets the euler_x of this SensorsGyroInfo.


        :param euler_x: The euler_x of this SensorsGyroInfo.  # noqa: E501
        :type: float
        """
        if euler_x is None:
            raise ValueError("Invalid value for `euler_x`, must not be `None`")  # noqa: E501

        self._euler_x = euler_x

    @property
    def euler_y(self):
        """Gets the euler_y of this SensorsGyroInfo.  # noqa: E501


        :return: The euler_y of this SensorsGyroInfo.  # noqa: E501
        :rtype: float
        """
        return self._euler_y

    @euler_y.setter
    def euler_y(self, euler_y):
        """Sets the euler_y of this SensorsGyroInfo.


        :param euler_y: The euler_y of this SensorsGyroInfo.  # noqa: E501
        :type: float
        """
        if euler_y is None:
            raise ValueError("Invalid value for `euler_y`, must not be `None`")  # noqa: E501

        self._euler_y = euler_y

    @property
    def euler_z(self):
        """Gets the euler_z of this SensorsGyroInfo.  # noqa: E501


        :return: The euler_z of this SensorsGyroInfo.  # noqa: E501
        :rtype: float
        """
        return self._euler_z

    @euler_z.setter
    def euler_z(self, euler_z):
        """Sets the euler_z of this SensorsGyroInfo.


        :param euler_z: The euler_z of this SensorsGyroInfo.  # noqa: E501
        :type: float
        """
        if euler_z is None:
            raise ValueError("Invalid value for `euler_z`, must not be `None`")  # noqa: E501

        self._euler_z = euler_z

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SensorsGyroInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SensorsGyroInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
