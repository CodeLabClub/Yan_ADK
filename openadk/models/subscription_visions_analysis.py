# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openadk.models.base_model_ import Model
from openadk.models.subscription_visions_age import SubscriptionVisionsAge  # noqa: F401,E501
from openadk.models.subscription_visions_gender import SubscriptionVisionsGender  # noqa: F401,E501
from openadk import util


class SubscriptionVisionsAnalysis(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, age=None, gender=None):  # noqa: E501
        """SubscriptionVisionsAnalysis - a model defined in Swagger

        :param age: The age of this SubscriptionVisionsAnalysis.  # noqa: E501
        :type age: SubscriptionVisionsAge
        :param gender: The gender of this SubscriptionVisionsAnalysis.  # noqa: E501
        :type gender: SubscriptionVisionsGender
        """
        self.swagger_types = {
            'age': SubscriptionVisionsAge,
            'gender': SubscriptionVisionsGender
        }

        self.attribute_map = {
            'age': 'age',
            'gender': 'gender'
        }

        self._age = age
        self._gender = gender

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SubscriptionVisionsAnalysis of this SubscriptionVisionsAnalysis.  # noqa: E501
        :rtype: SubscriptionVisionsAnalysis
        """
        return util.deserialize_model(dikt, cls)

    @property
    def age(self):
        """Gets the age of this SubscriptionVisionsAnalysis.


        :return: The age of this SubscriptionVisionsAnalysis.
        :rtype: SubscriptionVisionsAge
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this SubscriptionVisionsAnalysis.


        :param age: The age of this SubscriptionVisionsAnalysis.
        :type age: SubscriptionVisionsAge
        """

        self._age = age

    @property
    def gender(self):
        """Gets the gender of this SubscriptionVisionsAnalysis.


        :return: The gender of this SubscriptionVisionsAnalysis.
        :rtype: SubscriptionVisionsGender
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this SubscriptionVisionsAnalysis.


        :param gender: The gender of this SubscriptionVisionsAnalysis.
        :type gender: SubscriptionVisionsGender
        """

        self._gender = gender
