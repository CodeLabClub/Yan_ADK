# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openadk.models.base_model_ import Model
from openadk.models.name import Name  # noqa: F401,E501
from openadk.models.visions_analysis import VisionsAnalysis  # noqa: F401,E501
from openadk.models.visions_quantity import VisionsQuantity  # noqa: F401,E501
from openadk import util


class VisionsResults(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, analysis=None, recognition=None, quantity=None):  # noqa: E501
        """VisionsResults - a model defined in Swagger

        :param analysis: The analysis of this VisionsResults.  # noqa: E501
        :type analysis: VisionsAnalysis
        :param recognition: The recognition of this VisionsResults.  # noqa: E501
        :type recognition: Name
        :param quantity: The quantity of this VisionsResults.  # noqa: E501
        :type quantity: VisionsQuantity
        """
        self.swagger_types = {
            'analysis': VisionsAnalysis,
            'recognition': Name,
            'quantity': VisionsQuantity
        }

        self.attribute_map = {
            'analysis': 'analysis',
            'recognition': 'recognition',
            'quantity': 'quantity'
        }

        self._analysis = analysis
        self._recognition = recognition
        self._quantity = quantity

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VisionsResults of this VisionsResults.  # noqa: E501
        :rtype: VisionsResults
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis(self):
        """Gets the analysis of this VisionsResults.


        :return: The analysis of this VisionsResults.
        :rtype: VisionsAnalysis
        """
        return self._analysis

    @analysis.setter
    def analysis(self, analysis):
        """Sets the analysis of this VisionsResults.


        :param analysis: The analysis of this VisionsResults.
        :type analysis: VisionsAnalysis
        """

        self._analysis = analysis

    @property
    def recognition(self):
        """Gets the recognition of this VisionsResults.


        :return: The recognition of this VisionsResults.
        :rtype: Name
        """
        return self._recognition

    @recognition.setter
    def recognition(self, recognition):
        """Sets the recognition of this VisionsResults.


        :param recognition: The recognition of this VisionsResults.
        :type recognition: Name
        """

        self._recognition = recognition

    @property
    def quantity(self):
        """Gets the quantity of this VisionsResults.


        :return: The quantity of this VisionsResults.
        :rtype: VisionsQuantity
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this VisionsResults.


        :param quantity: The quantity of this VisionsResults.
        :type quantity: VisionsQuantity
        """

        self._quantity = quantity
