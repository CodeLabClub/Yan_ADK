---
swagger: "2.0"
info:
  description: " ## Overview\n\nOpen ADK is designed for the users that they can build\
    \ their own application very quickly. Open ADK provided two features:\n- Easy\
    \ way to call API.\n- Easy way to receive the data from remote device.\n\nThis\
    \ Python package is automatically generated by the Swagger Codegen project:\n\
    - API version: 1.0.0\n- Package version: 1.0.0\n## Requirements.\nPython 2.7 or\
    \ 3.4+\n## Installation & Usage\nYou can install Open ADK from github.\n```\n\
    pip install git+https://github.com/UBTEDU/Yanshee_OpenADK.git\n```\n(you may need\
    \ to run pip with root permission: sudo pip install git+https://github.com//.git)\n\
    Then import the package:\n```\nimport openadk\n```\n## Setuptools\nInstall via\
    \ [Setuptools](https://pypi.org/project/setuptools/).\n```\npython setup.py install\
    \ --user\n```\n(or sudo python setup.py install to install the package for all\
    \ users)\nThen import the package:\n```\nimport openadk\n```\n## Getting Started\n\
    Please follow the installation procedure and then run the following:\n```\nfrom\
    \ __future__ import print_function\nimport time\nimport openadk\nfrom openadk.rest\
    \ import ApiException\nfrom pprint import pprint\n\n# create an instance of the\
    \ API class\nconfiguration = openadk.Configuration()\nconfiguration.host = 'http://<ip>:9090/v1'\n\
    api_instance = openadk.DevicesApi(openadk.ApiClient(configuration))\n\ntry:\n\t\
    # Get system's battery information\n\tapi_response = api_instance.get_devices_battery()\n\
    \tpprint(api_response)\nexcept ApiException as e:\n\tprint(\"Exception when calling\
    \ DevicesApi->get_devices_battery: %s\n\" % e)\n```\n"
  version: "1.0.0"
  title: "Yanshee Open ADK"
  termsOfService: "https://account.ubtrobot.com/gdpr/ukit/v1.0.3/TermsOfUse_en.html"
  contact:
    email: "swenggroup@ubtrobot.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "127.0.0.1:10101"
basePath: "/v1"
tags:
- name: "subscriptions"
  description: "Receive data from remote device."
schemes:
- "http"
paths:
  /subscriptions/motions:
    put:
      tags:
      - "subscriptions"
      summary: "Get the motion's status, which is pushed from the remote device."
      description: " Get motions' status. The possible values:\n- idle\n- run\n- pause "
      operationId: "put_motions"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: " The motion's status. "
        required: true
        schema:
          $ref: "#/definitions/SubscriptionMotionsStatusResponse"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/SubscriptionCommonResponse"
      x-swagger-router-controller: "openadk.controllers.subscriptions_controller"
  /subscriptions/sensors/gyro:
    put:
      tags:
      - "subscriptions"
      summary: "Get the gyroscope sensor's data, which is pushed from the remote device."
      description: ""
      operationId: "put_sensors_subscription"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/SubscriptionSensorsGyroValueResponse"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/SubscriptionCommonResponse"
      x-swagger-router-controller: "openadk.controllers.subscriptions_controller"
  /subscriptions/sensors/ultrasonic:
    put:
      tags:
      - "subscriptions"
      summary: "Get ultrasonic sensor's data, which is pushed from the remote device."
      description: ""
      operationId: "put_sensors_subscription_sensors_ultrasonic"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/SubscriptionSensorsUltrasonicValueResponse"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/SubscriptionCommonResponse"
      x-swagger-router-controller: "openadk.controllers.subscriptions_controller"
  /subscriptions/sensors/infrared:
    put:
      tags:
      - "subscriptions"
      summary: "Get infrared sensor's data, which is pushed from the remote device."
      description: ""
      operationId: "put_sensors_subscription_sensors_infrared"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/SubscriptionSensorsInfraredValueResponse"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/SubscriptionCommonResponse"
      x-swagger-router-controller: "openadk.controllers.subscriptions_controller"
  /subscriptions/sensors/environment:
    put:
      tags:
      - "subscriptions"
      summary: "Get environment sensor's data, which is pushed from the remote device."
      description: ""
      operationId: "put_sensors_subscription_sensors_environment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/SubscriptionSensorsEnvironmentValueResponse"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/SubscriptionCommonResponse"
      x-swagger-router-controller: "openadk.controllers.subscriptions_controller"
  /subscriptions/sensors/touch:
    put:
      tags:
      - "subscriptions"
      summary: "Get touch sensor's data, which is pushed from the remote device."
      description: ""
      operationId: "put_sensors_subscription_sensors_touch"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/SubscriptionSensorsTouchValueResponse"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/SubscriptionCommonResponse"
      x-swagger-router-controller: "openadk.controllers.subscriptions_controller"
  /subscriptions/sensors/pressure:
    put:
      tags:
      - "subscriptions"
      summary: "Get pressure sensor's data, which is pushed from the remote device."
      description: ""
      operationId: "put_sensors_subscription_sensors_pressure"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/SubscriptionSensorsPressureValueResponse"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/SubscriptionCommonResponse"
      x-swagger-router-controller: "openadk.controllers.subscriptions_controller"
  /subscriptions/visions:
    put:
      tags:
      - "subscriptions"
      summary: "Get compute vision's result, which is pushed from the remote device."
      description: "URL example: http://10.10.1.30:80/subscriptions/visions"
      operationId: "put_vision_subscription_visions"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/SubscriptionVisionsGetResponse"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/SubscriptionCommonResponse"
      x-swagger-router-controller: "openadk.controllers.subscriptions_controller"
  /subscriptions/voice/iat:
    put:
      tags:
      - "subscriptions"
      summary: "Get auto transform's result, which is pushed from the remote device."
      description: "URL example: http://10.10.1.30:80/subscriptions/voice/iat"
      operationId: "put_voice_iat_subscription_voice_iat"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/SubscriptionVoiceResponse"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/SubscriptionCommonResponse"
      x-swagger-router-controller: "openadk.controllers.subscriptions_controller"
  /subscriptions/voice/asr:
    put:
      tags:
      - "subscriptions"
      summary: "Get automatic speech recognition's result, which is pushed from the\
        \ remote device."
      description: "URL example: http://10.10.1.30:80/subscriptions/voice/asr"
      operationId: "put_voice_asr_subscriptions_voice_asr"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/SubscriptionVoiceResponse"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/SubscriptionCommonResponse"
      x-swagger-router-controller: "openadk.controllers.subscriptions_controller"
  /subscriptions/voice/tts:
    put:
      tags:
      - "subscriptions"
      summary: "Get text to speech's result, which is pushed from the remote device."
      description: "Example URL : http://10.10.1.30:80/tts"
      operationId: "put_tts_subscriptions_voice_tts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/SubscriptionVoiceResponse"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/SubscriptionCommonResponse"
      x-swagger-router-controller: "openadk.controllers.subscriptions_controller"
definitions:
  SubscriptionName:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
    xml:
      name: "SubscriptionName"
    example:
      name: "name"
  SubscriptionVisionsResults:
    type: "object"
    properties:
      analysis:
        $ref: "#/definitions/SubscriptionVisionsAnalysis"
      recognition:
        $ref: "#/definitions/SubscriptionName"
      quantity:
        type: "integer"
        example: 1
        description: "Quantity."
        minimum: 0
      color:
        type: "array"
        example:
        - name: "black"
        - name: "gray"
        - name: "red"
        - name: "blue"
        description: " The color results. The possible values:\n- none\n- black\n\
          - gray\n- white\n- red\n- orange\n- yellow\n- green\n- cyan\n- blue\n- purple "
        items:
          $ref: "#/definitions/SubscriptionName"
    xml:
      name: "SubscriptionVisionsResults"
    example:
      quantity: 1
      color:
      - name: "black"
      - name: "gray"
      - name: "red"
      - name: "blue"
      recognition:
        name: "name"
      analysis:
        gender:
          gender: "male"
        age:
          age: 5
          group: "baby"
  SubscriptionVisionsGetResponse:
    type: "object"
    required:
    - "code"
    - "msg"
    - "type"
    properties:
      code:
        type: "integer"
        example: 0
        description: "Return code. 0 means success."
      type:
        type: "string"
        description: " The compute vision's result. The possible \"type\" values:\n\
          - recognition\n- tracking\n- gender\n- age_group\n- quantity\n- color_detect "
        enum:
        - "recognition"
        - "tracking"
        - "gender"
        - "age_group"
        - "quantity"
        - "color_detect"
      data:
        $ref: "#/definitions/SubscriptionVisionsResults"
      timestamp:
        type: "integer"
        format: "int64"
        example: 1551838515
        description: "Timestamp, Unix standard time."
      status:
        type: "string"
        example: "idle"
        description: "Compute vision's status"
      msg:
        type: "string"
        example: "Success"
        description: "Return code details."
    xml:
      name: "SubscriptionVisionsGetResponse"
    example:
      msg: "Success"
      code: 0
      data:
        quantity: 1
        color:
        - name: "black"
        - name: "gray"
        - name: "red"
        - name: "blue"
        recognition:
          name: "name"
        analysis:
          gender:
            gender: "male"
          age:
            age: 5
            group: "baby"
      type: "recognition"
      timestamp: 1551838515
      status: "idle"
  SubscriptionVoiceResponse:
    type: "object"
    required:
    - "code"
    - "msg"
    - "type"
    properties:
      code:
        type: "integer"
        example: 0
        description: "Return code. 0 means success."
      type:
        type: "string"
        example: "asr"
        description: " The possible values:\n- asr\n- iat\n- tts "
        enum:
        - "asr"
        - "iat"
        - "tts"
      data:
        type: "object"
        example: {}
        description: " Automatic speech recognition or auto transform's result. "
        properties: {}
      timestamp:
        type: "integer"
        format: "int64"
        example: 1000789666
        description: "Timestamp, Unix standard time."
      msg:
        type: "string"
        description: "Return code's details."
    xml:
      name: "SubscriptionVoiceResponse"
    description: " Automatic speech recognition or auto transform's result. "
    example:
      msg: "msg"
      code: 0
      data: {}
      type: "asr"
      timestamp: 1000789666
  SubscriptionCommonResponse:
    type: "object"
    required:
    - "code"
    - "data"
    - "msg"
    properties:
      code:
        type: "integer"
        format: "int32"
        description: "Return code. 0 means success."
      data:
        type: "object"
        example: {}
        properties: {}
      msg:
        type: "string"
        example: "Success"
        description: "Return code's details."
    xml:
      name: "SubscriptionCommonResponse"
    example:
      msg: "Success"
      code: 0
      data: {}
  SubscriptionSensorsEnvironmentInfo:
    type: "object"
    required:
    - "humidity"
    - "id"
    - "temperature"
    properties:
      id:
        type: "integer"
        format: "int32"
        example: 54
        minimum: 1
        maximum: 127
      slot:
        type: "integer"
        format: "int32"
        example: 1
        description: "The sensor's slot number."
        minimum: 1
        maximum: 6
      temperature:
        type: "integer"
        format: "int32"
        example: 25
        description: "The temperature sensor's value."
      humidity:
        type: "integer"
        format: "int32"
        example: 75
        description: "The humidity sensor's value."
      pressure:
        type: "integer"
        format: "int32"
        example: 1003
        description: "The pressure sensor's value."
    xml:
      name: "SubscriptionSensorsEnvironmentInfo"
    example:
      temperature: 25
      humidity: 75
      id: 54
      slot: 1
      pressure: 1003
  SubscriptionSensorsEnvironmentValue:
    type: "object"
    required:
    - "environment"
    properties:
      environment:
        type: "array"
        items:
          $ref: "#/definitions/SubscriptionSensorsEnvironmentInfo"
    xml:
      name: "SubscriptionSensorsEnvironmentValue"
    example:
      environment:
      - temperature: 25
        humidity: 75
        id: 54
        slot: 1
        pressure: 1003
      - temperature: 25
        humidity: 75
        id: 54
        slot: 1
        pressure: 1003
  SubscriptionSensorsEnvironmentValueResponse:
    type: "object"
    required:
    - "code"
    - "data"
    - "msg"
    properties:
      code:
        type: "integer"
        format: "int32"
        description: "Return code. 0 means success."
      data:
        $ref: "#/definitions/SubscriptionSensorsEnvironmentValue"
      msg:
        type: "string"
        example: "Success"
        description: "Return code's details."
    xml:
      name: "SubscriptionSensorsEnvironmentValueResponse"
    example:
      msg: "Success"
      code: 0
      data:
        environment:
        - temperature: 25
          humidity: 75
          id: 54
          slot: 1
          pressure: 1003
        - temperature: 25
          humidity: 75
          id: 54
          slot: 1
          pressure: 1003
  SubscriptionSensorsInfraredInfo:
    type: "object"
    required:
    - "id"
    - "value"
    properties:
      id:
        type: "integer"
        format: "int32"
        example: 23
        description: "Sensor's I2C address."
        minimum: 1
        maximum: 127
      slot:
        type: "integer"
        format: "int32"
        example: 1
        description: "Sensor's slot number."
        minimum: 1
        maximum: 6
      value:
        type: "integer"
        format: "int32"
        example: 25
        description: "Distance value. (mm)"
    xml:
      name: "SubscriptionSensorsInfraredInfo"
    example:
      id: 23
      slot: 1
      value: 25
  SubscriptionSensorsInfraredValue:
    type: "object"
    required:
    - "infrared"
    properties:
      infrared:
        type: "array"
        items:
          $ref: "#/definitions/SubscriptionSensorsInfraredInfo"
    xml:
      name: "SubscriptionSensorsInfraredValue"
    example:
      infrared:
      - id: 23
        slot: 1
        value: 25
      - id: 23
        slot: 1
        value: 25
  SubscriptionSensorsInfraredValueResponse:
    type: "object"
    required:
    - "code"
    - "data"
    - "msg"
    properties:
      code:
        type: "integer"
        format: "int32"
        description: "Return code. 0 means success."
      data:
        $ref: "#/definitions/SubscriptionSensorsInfraredValue"
      msg:
        type: "string"
        example: "Success"
        description: "Return code's details."
    xml:
      name: "SubscriptionSensorsInfraredValueResponse"
    example:
      msg: "Success"
      code: 0
      data:
        infrared:
        - id: 23
          slot: 1
          value: 25
        - id: 23
          slot: 1
          value: 25
  SubscriptionSensorsPressureInfo:
    type: "object"
    required:
    - "id"
    - "value"
    properties:
      id:
        type: "integer"
        format: "int32"
        example: 35
        description: "Sensor's I2C address."
        minimum: 1
        maximum: 127
      slot:
        type: "integer"
        format: "int32"
        example: 1
        description: "Sensor's slot number."
        minimum: 1
        maximum: 6
      value:
        type: "integer"
        format: "int32"
        example: 25
        description: "The pressure sensor's value. (N)"
    xml:
      name: "SubscriptionSensorsPressureInfo"
    example:
      id: 35
      slot: 1
      value: 25
  SubscriptionSensorsPressureValue:
    type: "object"
    required:
    - "pressure"
    properties:
      pressure:
        type: "array"
        items:
          $ref: "#/definitions/SubscriptionSensorsPressureInfo"
    xml:
      name: "SubscriptionSensorsUltrasonicValue"
    example:
      pressure:
      - id: 35
        slot: 1
        value: 25
      - id: 35
        slot: 1
        value: 25
  SubscriptionSensorsPressureValueResponse:
    type: "object"
    required:
    - "code"
    - "data"
    - "msg"
    properties:
      code:
        type: "integer"
        format: "int32"
        description: "Return code. 0 means success."
      data:
        $ref: "#/definitions/SubscriptionSensorsPressureValue"
      msg:
        type: "string"
        example: "Success"
        description: "Return code's details."
    xml:
      name: "SubscriptionSensorsPressureValueResponse"
    example:
      msg: "Success"
      code: 0
      data:
        pressure:
        - id: 35
          slot: 1
          value: 25
        - id: 35
          slot: 1
          value: 25
  SubscriptionSensorsTouchInfo:
    type: "object"
    required:
    - "id"
    - "value"
    properties:
      id:
        type: "integer"
        format: "int32"
        example: 29
        description: "Sensor's I2C address."
        minimum: 1
        maximum: 127
      slot:
        type: "integer"
        format: "int32"
        example: 1
        description: "Sensor's slot number."
        minimum: 1
        maximum: 6
      value:
        type: "integer"
        format: "int32"
        example: 25
        description: " The touch sensor's value. The possible values:\n- 0   Not touched\n\
          - 1   Button 1 is touched\n- 2   Button 2 is touched\n- 3   Button 1 and\
          \ 2 are touched\n"
    xml:
      name: "SubscriptionSensorsTouchInfo"
    example:
      id: 29
      slot: 1
      value: 25
  SubscriptionSensorsTouchValue:
    type: "object"
    required:
    - "touch"
    properties:
      touch:
        type: "array"
        items:
          $ref: "#/definitions/SubscriptionSensorsTouchInfo"
    xml:
      name: "SubscriptionSensorsTouchValue"
    example:
      touch:
      - id: 29
        slot: 1
        value: 25
      - id: 29
        slot: 1
        value: 25
  SubscriptionSensorsTouchValueResponse:
    type: "object"
    required:
    - "code"
    - "data"
    - "msg"
    properties:
      code:
        type: "integer"
        format: "int32"
        description: "Return code. 0 means success."
      data:
        $ref: "#/definitions/SubscriptionSensorsTouchValue"
      msg:
        type: "string"
        example: "Success"
        description: "Return code's details."
    xml:
      name: "SubscriptionSensorsTouchValueResponse"
    example:
      msg: "Success"
      code: 0
      data:
        touch:
        - id: 29
          slot: 1
          value: 25
        - id: 29
          slot: 1
          value: 25
  SubscriptionSensorsUltrasonicInfo:
    type: "object"
    required:
    - "id"
    - "value"
    properties:
      id:
        type: "integer"
        format: "int32"
        example: 17
        description: "Sensor's I2C address."
        minimum: 1
        maximum: 127
      slot:
        type: "integer"
        format: "int32"
        example: 1
        description: "Sensor's slot number."
        minimum: 1
        maximum: 6
      value:
        type: "integer"
        format: "int32"
        example: 25
        description: " The ultrasonic sensor's value. (mm) "
    xml:
      name: "SubscriptionSensorsUltrasonicInfo"
    example:
      id: 17
      slot: 1
      value: 25
  SubscriptionSensorsUltrasonicValue:
    type: "object"
    required:
    - "ultrasonic"
    properties:
      ultrasonic:
        type: "array"
        items:
          $ref: "#/definitions/SubscriptionSensorsUltrasonicInfo"
    xml:
      name: "SubscriptionSensorsUltrasonicValue"
    example:
      ultrasonic:
      - id: 17
        slot: 1
        value: 25
      - id: 17
        slot: 1
        value: 25
  SubscriptionSensorsUltrasonicValueResponse:
    type: "object"
    required:
    - "code"
    - "data"
    - "msg"
    properties:
      code:
        type: "integer"
        format: "int32"
        description: "Return code. 0 means success."
      data:
        $ref: "#/definitions/SubscriptionSensorsUltrasonicValue"
      msg:
        type: "string"
        example: "Success"
        description: "Return code's details."
    xml:
      name: "SubscriptionSensorsUltrasonicValueResponse"
    example:
      msg: "Success"
      code: 0
      data:
        ultrasonic:
        - id: 17
          slot: 1
          value: 25
        - id: 17
          slot: 1
          value: 25
  SubscriptionSensorsGyroInfo:
    type: "object"
    required:
    - "euler-x"
    - "euler-y"
    - "euler-z"
    - "id"
    properties:
      id:
        type: "integer"
        format: "int32"
        example: 52
        minimum: 1
        maximum: 127
      gyro-x:
        type: "number"
        format: "float"
        example: 0.1021
      gyro-y:
        type: "number"
        format: "float"
        example: 0.602
      gyro-z:
        type: "number"
        format: "float"
        example: 0.0213
      accel-x:
        type: "number"
        format: "float"
        example: 0.147949
      accel-y:
        type: "number"
        format: "float"
        example: 0.116699
      accel-z:
        type: "number"
        example: 0.813477
      compass-x:
        type: "number"
        format: "float"
        example: 0.1021
      compass-y:
        type: "number"
        format: "float"
        example: 0.602
      compass-z:
        type: "number"
        format: "float"
        example: 0.01232
      euler-x:
        type: "number"
        format: "float"
        example: 8.073578
      euler-y:
        type: "number"
        format: "float"
        example: -10.11795
      euler-z:
        type: "number"
        format: "float"
        example: 0.72052
    xml:
      name: "SubscriptionSensorsGyroInfo"
    example:
      euler-y: -10.11795
      euler-x: 8.073578
      euler-z: 0.72052
      compass-x: 0.1021
      compass-y: 0.602
      compass-z: 0.01232
      gyro-y: 0.602
      accel-y: 0.116699
      id: 52
      gyro-x: 0.1021
      accel-z: 0.813477
      gyro-z: 0.0213
      accel-x: 0.147949
  SubscriptionSensorsGyroValue:
    type: "object"
    required:
    - "gyro"
    properties:
      gyro:
        type: "array"
        items:
          $ref: "#/definitions/SubscriptionSensorsGyroInfo"
    xml:
      name: "SubscriptionSensorsGyroValue"
    example:
      gyro:
      - euler-y: -10.11795
        euler-x: 8.073578
        euler-z: 0.72052
        compass-x: 0.1021
        compass-y: 0.602
        compass-z: 0.01232
        gyro-y: 0.602
        accel-y: 0.116699
        id: 52
        gyro-x: 0.1021
        accel-z: 0.813477
        gyro-z: 0.0213
        accel-x: 0.147949
      - euler-y: -10.11795
        euler-x: 8.073578
        euler-z: 0.72052
        compass-x: 0.1021
        compass-y: 0.602
        compass-z: 0.01232
        gyro-y: 0.602
        accel-y: 0.116699
        id: 52
        gyro-x: 0.1021
        accel-z: 0.813477
        gyro-z: 0.0213
        accel-x: 0.147949
  SubscriptionSensorsGyroValueResponse:
    type: "object"
    required:
    - "code"
    - "data"
    - "msg"
    properties:
      code:
        type: "integer"
        format: "int32"
        description: "Return code. 0 means success."
      data:
        $ref: "#/definitions/SubscriptionSensorsGyroValue"
      msg:
        type: "string"
        example: "Success"
        description: "Return code's details."
    xml:
      name: "SubscriptionSensorsGyroValueResponse"
    example:
      msg: "Success"
      code: 0
      data:
        gyro:
        - euler-y: -10.11795
          euler-x: 8.073578
          euler-z: 0.72052
          compass-x: 0.1021
          compass-y: 0.602
          compass-z: 0.01232
          gyro-y: 0.602
          accel-y: 0.116699
          id: 52
          gyro-x: 0.1021
          accel-z: 0.813477
          gyro-z: 0.0213
          accel-x: 0.147949
        - euler-y: -10.11795
          euler-x: 8.073578
          euler-z: 0.72052
          compass-x: 0.1021
          compass-y: 0.602
          compass-z: 0.01232
          gyro-y: 0.602
          accel-y: 0.116699
          id: 52
          gyro-x: 0.1021
          accel-z: 0.813477
          gyro-z: 0.0213
          accel-x: 0.147949
  SubscriptionMotionsStatus:
    type: "object"
    required:
    - "status"
    properties:
      status:
        type: "string"
        description: "The motions' status."
        enum:
        - "idle"
        - "run"
        - "pause"
      name:
        type: "string"
        description: "Motion name"
        default: "None"
      timestamp:
        type: "integer"
        format: "int64"
        example: 1551838515
        description: "Timestamp, Unix standard time."
    example:
      name: "None"
      status: "idle"
      timestamp: 1551838515
  SubscriptionMotionsStatusResponse:
    type: "object"
    required:
    - "code"
    - "data"
    - "msg"
    properties:
      code:
        type: "integer"
        format: "int32"
        description: "Return code. 0 means success."
      data:
        $ref: "#/definitions/SubscriptionMotionsStatus"
      msg:
        type: "string"
        example: "Success"
        description: "Return code's details."
    xml:
      name: "SubscriptionMotionsStatusResponse"
    example:
      msg: "Success"
      code: 0
      data:
        name: "None"
        status: "idle"
        timestamp: 1551838515
  SubscriptionVisionsGender:
    type: "object"
    required:
    - "gender"
    properties:
      gender:
        type: "string"
        description: " The compute vision's result. The possible values:\n- male\n\
          - female\n- none    default value "
        enum:
        - "male"
        - "female"
        - "none"
    xml:
      name: "SubscriptionVisionsGender"
    example:
      gender: "male"
  SubscriptionVisionsAge:
    type: "object"
    properties:
      age:
        type: "integer"
        example: 5
        description: "Age."
        minimum: 0
      group:
        type: "string"
        example: "baby"
        description: " The age group value. The possible values:\n- baby\n- children\n\
          - juvenile\n- youth\n- middle_age\n- old_age\n- none "
    xml:
      name: "SubscriptionVisionsAge"
    example:
      age: 5
      group: "baby"
  SubscriptionVisionsAnalysis:
    type: "object"
    properties:
      age:
        $ref: "#/definitions/SubscriptionVisionsAge"
      gender:
        $ref: "#/definitions/SubscriptionVisionsGender"
    xml:
      name: "SubscriptionVisionsAnalysis"
    example:
      gender:
        gender: "male"
      age:
        age: 5
        group: "baby"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
