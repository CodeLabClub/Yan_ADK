# coding: utf-8

"""
    Yanshee RESTful API

    Yanshee RESTful APIs是一套专门为编程爱好者提供二次开发的接口．它通过http/https的方式向外界提供机器人控制，传感器读取，机器人视觉等功能．用户还可以通过编程的方式训练自己的模型，学习一些机器学习的内容．  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: swenggroup@ubtrobot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openadk.models.sensors_parameter import SensorsParameter  # noqa: F401,E501


class SensorsOperationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operation': 'str',
        'sensor': 'SensorsParameter'
    }

    attribute_map = {
        'operation': 'operation',
        'sensor': 'sensor'
    }

    def __init__(self, operation=None, sensor=None):  # noqa: E501
        """SensorsOperationRequest - a model defined in Swagger"""  # noqa: E501

        self._operation = None
        self._sensor = None
        self.discriminator = None

        self.operation = operation
        self.sensor = sensor

    @property
    def operation(self):
        """Gets the operation of this SensorsOperationRequest.  # noqa: E501

        操作类型，取值说明： - modify （修改传感器地址） - calibrate （校准，注意：只支持gyro校准并且机器人要平躺或者平趴）  # noqa: E501

        :return: The operation of this SensorsOperationRequest.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this SensorsOperationRequest.

        操作类型，取值说明： - modify （修改传感器地址） - calibrate （校准，注意：只支持gyro校准并且机器人要平躺或者平趴）  # noqa: E501

        :param operation: The operation of this SensorsOperationRequest.  # noqa: E501
        :type: str
        """
        if operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501
        allowed_values = ["calibrate", "modify"]  # noqa: E501
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"  # noqa: E501
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def sensor(self):
        """Gets the sensor of this SensorsOperationRequest.  # noqa: E501


        :return: The sensor of this SensorsOperationRequest.  # noqa: E501
        :rtype: SensorsParameter
        """
        return self._sensor

    @sensor.setter
    def sensor(self, sensor):
        """Sets the sensor of this SensorsOperationRequest.


        :param sensor: The sensor of this SensorsOperationRequest.  # noqa: E501
        :type: SensorsParameter
        """
        if sensor is None:
            raise ValueError("Invalid value for `sensor`, must not be `None`")  # noqa: E501

        self._sensor = sensor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SensorsOperationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SensorsOperationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
