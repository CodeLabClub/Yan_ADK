# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openadk.models.base_model_ import Model
from openadk import util


class SensorsParameter(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, type='gyro', id=None, value=None):  # noqa: E501
        """SensorsParameter - a model defined in Swagger

        :param type: The type of this SensorsParameter.  # noqa: E501
        :type type: str
        :param id: The id of this SensorsParameter.  # noqa: E501
        :type id: int
        :param value: The value of this SensorsParameter.  # noqa: E501
        :type value: int
        """
        self.swagger_types = {
            'type': str,
            'id': int,
            'value': int
        }

        self.attribute_map = {
            'type': 'type',
            'id': 'id',
            'value': 'value'
        }

        self._type = type
        self._id = id
        self._value = value

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SensorsParameter of this SensorsParameter.  # noqa: E501
        :rtype: SensorsParameter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this SensorsParameter.


        :return: The type of this SensorsParameter.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SensorsParameter.


        :param type: The type of this SensorsParameter.
        :type type: str
        """
        allowed_values = ["gyro", "infrared", "ultrasonic", "touch", "pressure"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """Gets the id of this SensorsParameter.


        :return: The id of this SensorsParameter.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SensorsParameter.


        :param id: The id of this SensorsParameter.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if id is not None and id > 127:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value less than or equal to `127`")  # noqa: E501
        if id is not None and id < 1:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def value(self):
        """Gets the value of this SensorsParameter.

        （1）当operation为calibrate时，省略该字段；（2）当operation为modify（即修改传感器ID）时，value的取值说明：超声传感器为17~22；红外传感器为23~28；触摸传感器为29~34；压力传感器为35~40，其它传感器ID不允许修改!  # noqa: E501

        :return: The value of this SensorsParameter.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SensorsParameter.

        （1）当operation为calibrate时，省略该字段；（2）当operation为modify（即修改传感器ID）时，value的取值说明：超声传感器为17~22；红外传感器为23~28；触摸传感器为29~34；压力传感器为35~40，其它传感器ID不允许修改!  # noqa: E501

        :param value: The value of this SensorsParameter.
        :type value: int
        """

        self._value = value
