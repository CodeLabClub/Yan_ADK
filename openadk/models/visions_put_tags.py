# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openadk.models.base_model_ import Model
from openadk.models.name import Name  # noqa: F401,E501
from openadk import util


class VisionsPutTags(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, tags=None, name=None):  # noqa: E501
        """VisionsPutTags - a model defined in Swagger

        :param tags: The tags of this VisionsPutTags.  # noqa: E501
        :type tags: str
        :param name: The name of this VisionsPutTags.  # noqa: E501
        :type name: List[Name]
        """
        self.swagger_types = {
            'tags': str,
            'name': List[Name]
        }

        self.attribute_map = {
            'tags': 'tags',
            'name': 'name'
        }

        self._tags = tags
        self._name = name

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VisionsPutTags of this VisionsPutTags.  # noqa: E501
        :rtype: VisionsPutTags
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tags(self):
        """Gets the tags of this VisionsPutTags.

        标签名  # noqa: E501

        :return: The tags of this VisionsPutTags.
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this VisionsPutTags.

        标签名  # noqa: E501

        :param tags: The tags of this VisionsPutTags.
        :type tags: str
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def name(self):
        """Gets the name of this VisionsPutTags.


        :return: The name of this VisionsPutTags.
        :rtype: List[Name]
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VisionsPutTags.


        :param name: The name of this VisionsPutTags.
        :type name: List[Name]
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name
