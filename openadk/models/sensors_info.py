# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openadk.models.base_model_ import Model
from openadk import util


class SensorsInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id=None, type=None, version=None):  # noqa: E501
        """SensorsInfo - a model defined in Swagger

        :param id: The id of this SensorsInfo.  # noqa: E501
        :type id: int
        :param type: The type of this SensorsInfo.  # noqa: E501
        :type type: str
        :param version: The version of this SensorsInfo.  # noqa: E501
        :type version: int
        """
        self.swagger_types = {
            'id': int,
            'type': str,
            'version': int
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'version': 'version'
        }

        self._id = id
        self._type = type
        self._version = version

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SensorsInfo of this SensorsInfo.  # noqa: E501
        :rtype: SensorsInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this SensorsInfo.

        传感器ID值  # noqa: E501

        :return: The id of this SensorsInfo.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SensorsInfo.

        传感器ID值  # noqa: E501

        :param id: The id of this SensorsInfo.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if id is not None and id > 127:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value less than or equal to `127`")  # noqa: E501
        if id is not None and id < 1:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def type(self):
        """Gets the type of this SensorsInfo.

        传感器名称  # noqa: E501

        :return: The type of this SensorsInfo.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SensorsInfo.

        传感器名称  # noqa: E501

        :param type: The type of this SensorsInfo.
        :type type: str
        """
        allowed_values = ["gyro", "infrared", "ultrasonic", "environment", "touch", "pressure"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def version(self):
        """Gets the version of this SensorsInfo.

        传感器版本号  # noqa: E501

        :return: The version of this SensorsInfo.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SensorsInfo.

        传感器版本号  # noqa: E501

        :param version: The version of this SensorsInfo.
        :type version: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version
