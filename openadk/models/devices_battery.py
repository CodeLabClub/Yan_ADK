# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openadk.models.base_model_ import Model
from openadk import util


class DevicesBattery(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, voltage=None, charging=None, percent=None):  # noqa: E501
        """DevicesBattery - a model defined in Swagger

        :param voltage: The voltage of this DevicesBattery.  # noqa: E501
        :type voltage: int
        :param charging: The charging of this DevicesBattery.  # noqa: E501
        :type charging: int
        :param percent: The percent of this DevicesBattery.  # noqa: E501
        :type percent: int
        """
        self.swagger_types = {
            'voltage': int,
            'charging': int,
            'percent': int
        }

        self.attribute_map = {
            'voltage': 'voltage',
            'charging': 'charging',
            'percent': 'percent'
        }

        self._voltage = voltage
        self._charging = charging
        self._percent = percent

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DevicesBattery of this DevicesBattery.  # noqa: E501
        :rtype: DevicesBattery
        """
        return util.deserialize_model(dikt, cls)

    @property
    def voltage(self):
        """Gets the voltage of this DevicesBattery.


        :return: The voltage of this DevicesBattery.
        :rtype: int
        """
        return self._voltage

    @voltage.setter
    def voltage(self, voltage):
        """Sets the voltage of this DevicesBattery.


        :param voltage: The voltage of this DevicesBattery.
        :type voltage: int
        """
        if voltage is None:
            raise ValueError("Invalid value for `voltage`, must not be `None`")  # noqa: E501

        self._voltage = voltage

    @property
    def charging(self):
        """Gets the charging of this DevicesBattery.

        充电状态  # noqa: E501

        :return: The charging of this DevicesBattery.
        :rtype: int
        """
        return self._charging

    @charging.setter
    def charging(self, charging):
        """Sets the charging of this DevicesBattery.

        充电状态  # noqa: E501

        :param charging: The charging of this DevicesBattery.
        :type charging: int
        """
        if charging is None:
            raise ValueError("Invalid value for `charging`, must not be `None`")  # noqa: E501

        self._charging = charging

    @property
    def percent(self):
        """Gets the percent of this DevicesBattery.


        :return: The percent of this DevicesBattery.
        :rtype: int
        """
        return self._percent

    @percent.setter
    def percent(self, percent):
        """Sets the percent of this DevicesBattery.


        :param percent: The percent of this DevicesBattery.
        :type percent: int
        """
        if percent is None:
            raise ValueError("Invalid value for `percent`, must not be `None`")  # noqa: E501

        self._percent = percent
