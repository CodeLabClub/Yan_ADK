# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openadk.models.base_model_ import Model
from openadk import util


class SubscriptionsVisions(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, type=None, url=None):  # noqa: E501
        """SubscriptionsVisions - a model defined in Swagger

        :param type: The type of this SubscriptionsVisions.  # noqa: E501
        :type type: str
        :param url: The url of this SubscriptionsVisions.  # noqa: E501
        :type url: str
        """
        self.swagger_types = {
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'type': 'type',
            'url': 'url'
        }

        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SubscriptionsVisions of this SubscriptionsVisions.  # noqa: E501
        :rtype: SubscriptionsVisions
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this SubscriptionsVisions.

        消息类型。type 允许上传的值有 'face_recognition', 'gesture_recognition', 'object_recognition', 'face_analysis_gender', 'face_analysis_age', 'face_analysis_expression', 'face_quantity', 'hand_quantity'   # noqa: E501

        :return: The type of this SubscriptionsVisions.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SubscriptionsVisions.

        消息类型。type 允许上传的值有 'face_recognition', 'gesture_recognition', 'object_recognition', 'face_analysis_gender', 'face_analysis_age', 'face_analysis_expression', 'face_quantity', 'hand_quantity'   # noqa: E501

        :param type: The type of this SubscriptionsVisions.
        :type type: str
        """
        allowed_values = ["face_recognition", "gesture_recognition", "object_recognition", "face_analysis_gender", "face_analysis_age", "face_analysis_expression", "face_quantity", "hand_quantity"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this SubscriptionsVisions.

        视觉消息推送地址  # noqa: E501

        :return: The url of this SubscriptionsVisions.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SubscriptionsVisions.

        视觉消息推送地址  # noqa: E501

        :param url: The url of this SubscriptionsVisions.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url
