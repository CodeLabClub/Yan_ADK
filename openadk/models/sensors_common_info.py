# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openadk.models.base_model_ import Model
from openadk import util


class SensorsCommonInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id=None, value=None):  # noqa: E501
        """SensorsCommonInfo - a model defined in Swagger

        :param id: The id of this SensorsCommonInfo.  # noqa: E501
        :type id: int
        :param value: The value of this SensorsCommonInfo.  # noqa: E501
        :type value: int
        """
        self.swagger_types = {
            'id': int,
            'value': int
        }

        self.attribute_map = {
            'id': 'id',
            'value': 'value'
        }

        self._id = id
        self._value = value

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SensorsCommonInfo of this SensorsCommonInfo.  # noqa: E501
        :rtype: SensorsCommonInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this SensorsCommonInfo.


        :return: The id of this SensorsCommonInfo.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SensorsCommonInfo.


        :param id: The id of this SensorsCommonInfo.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if id is not None and id > 127:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value less than or equal to `127`")  # noqa: E501
        if id is not None and id < 1:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def value(self):
        """Gets the value of this SensorsCommonInfo.


        :return: The value of this SensorsCommonInfo.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SensorsCommonInfo.


        :param value: The value of this SensorsCommonInfo.
        :type value: int
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value
