# coding: utf-8

"""
    Yanshee RESTful API

     ## Overview Yanshee RESTful APIs are generated by the [swagger-codegen](https://github.com/swagger-api/swagger-codegen) project. By using the [OpenAPI-Spec](https://github.com/swagger-api/swagger-core/wiki) from a remote server. The API service uses the [Connexion](https://github.com/zalando/connexion) library on top of Flask.  To provide the API service, Yanshee RESTful APIs are integrated into apollo package, it is a part of Yanshee-ROS framework. Yanshee RESTful APIs provided two language versions: - [English version](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_en/1.0.0) - [Chinese version](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_cn/1.0.0)  ## Requirements. Python 2.7 or 3.4+  ## Getting Started Please follow the [installation procedure](#installation--usage) and then run the following:  ``` from __future__ import print_function import time import openadk from openadk.rest import ApiException from pprint import pprint  # create an instance of the API class configuration = openadk.Configuration() configuration.host = 'http://192.168.1.100:9090/v1' api_instance = openadk.DevicesApi(openadk.ApiClient(configuration)) try:  # Get system's battery information  api_response = api_instance.get_devices_battery()  pprint(api_response) except ApiException as e:  print(\"Exception when calling DevicesApi->get_devices_battery: %s\" % e)  ```   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: swenggroup@ubtrobot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import unittest

import openadk
from openadk.api.motions_api import MotionsApi  # noqa: E501
from openadk.rest import ApiException
from openadk.models.motions_parameter import MotionsParameter  # noqa: F401,E501
import time

from openadk.models.name import Name
from openadk.models.motions_info import MotionsInfo
from openadk.models.motions_operation import MotionsOperation


class TestMotionsApi(unittest.TestCase):
    """MotionsApi unit test stubs"""

    def setUp(self):
        self.configuration = openadk.Configuration()
        self.configuration.host = 'http://10.10.60.131:9090/v1'
        self.api_instance = MotionsApi(openadk.ApiClient(self.configuration))  # noqa: E501

    def tearDown(self):
        pass

    def test_delete_motions_music(self):
        """Test case for delete_motions_music

        Delete motion files  # noqa: E501
        """
        # delete nonexistent motion
        name = 'unknown_motion'
        body = Name(name=name)
        ret = self.api_instance.delete_motions_music(body=body)
        self.assertEqual(ret.code, 103, ret)

        # delete existent motion
        name = 'my_waka.hts'
        file = 'files/' + name
        ret = self.api_instance.post_motions(file)
        self.assertEqual(ret.code, 0, ret)
        body = Name(name=name[0:-4])
        ret = self.api_instance.delete_motions_music(body=body)
        self.assertEqual(ret.code, 0, ret)

    def test_get_motions(self):
        """Test case for get_motions

        Get the current motions' status  # noqa: E501
        """
        # get status while playing motion
        timestamp = int(time.time())
        name = 'wave'
        motion = MotionsParameter(name=name, direction='both', speed='fast', repeat=5)
        body = MotionsOperation(motion=motion, operation='start', timestamp=timestamp)
        ret = self.api_instance.put_motions(body)  # return RuntimeResponse instance 
        self.assertEqual(ret.code, 0, ret)
        ret = self.api_instance.get_motions()  # return MotionsStatusResponse instance 
        self.assertEqual(ret.code, 0, ret)
        self.assertEqual(ret.data.name.startswith(name), True, ret)
        self.assertEqual(ret.data.status, 'run', ret)

        # get status while pause motion
        body = MotionsOperation(motion=motion, operation='pause', timestamp=timestamp)
        ret = self.api_instance.put_motions(body)  # return RuntimeResponse instance 
        self.assertEqual(ret.code, 0, ret)
        ret = self.api_instance.get_motions()  # return MotionsStatusResponse instance 
        self.assertEqual(ret.code, 0, ret)
        self.assertEqual(ret.data.name.startswith(name), True, ret)
        self.assertEqual(ret.data.status, 'pause', ret)

        # get status after playing motion
        body = MotionsOperation(motion=motion, operation='stop', timestamp=timestamp)
        ret = self.api_instance.put_motions(body)  # return RuntimeResponse instance 
        self.assertEqual(ret.code, 0, ret)
        ret = self.api_instance.get_motions()   # return MotionsStatusResponse instance 
        self.assertEqual(ret.code, 0, ret)
        self.assertEqual(ret.data.name, '', ret)
        self.assertEqual(ret.data.status, 'idle', ret)

    def test_get_motions_list(self):
        """Test case for get_motions_list

        Get all the motions' name  # noqa: E501
        """
        same_motion = MotionsInfo(name='Little_Apple', music=True)
        ret = self.api_instance.get_motions_list()  # return MotionsListResponse instance 
        self.assertEqual(ret.code, 0, ret)
        self.assertEqual(same_motion in ret.data.motions, True, ret)

    def test_post_motions(self):
        """Test case for post_motions

        Upload motion files  # noqa: E501
        """
        for name in ['my_waka.hts', 'little_frog.mp3', 'my_waka.zip']:
            file = 'files/' + name
            ret = self.api_instance.post_motions(file)
            if file.endswith('hts') or file.endswith('zip'):
                self.assertEqual(ret.code, 0, ret)
                # check if in list or not
                some_motion = MotionsInfo(name=name[0:-4], music=True if file.endswith('zip') else False)
                ret = self.api_instance.get_motions_list()  # return MotionsListResponse instance 
                self.assertEqual(ret.code, 0, ret)
                self.assertEqual(some_motion in ret.data.motions, True, ret)
                # check if can be executed or not
                motion = MotionsParameter(name=name[0:-4])
                timestamp = int(time.time())
                body = MotionsOperation(motion=motion, operation='start', timestamp=timestamp)
                ret = self.api_instance.put_motions(body)  # return RuntimeResponse instance 
                self.assertEqual(ret.code, 0, ret)
                time.sleep(3.0)
                body = MotionsOperation(motion=motion, operation='stop', timestamp=timestamp)
                ret = self.api_instance.put_motions(body)  # return RuntimeResponse instance 
                self.assertEqual(ret.code, 0, ret)
            else:
                self.assertEqual(ret.code, 104, ret)

    def test_put_motions(self):
        """Test case for put_motions

        Update the motions  # noqa: E501
        """
        motion = MotionsParameter(name='wave', direction='both', speed='fast', repeat=5)
        for operation in ['start', 'pause', 'resume', 'stop']:
            body = MotionsOperation(motion=motion, operation=operation, timestamp=int(time.time()))
            ret = self.api_instance.put_motions(body)   # return RuntimeResponse instance 
            self.assertEqual(ret.code, 0, ret)
            if operation in ['start', 'stop']:
                self.assertNotEqual(ret.data.total_time, 0, ret)
            if operation in ['start', 'pause', 'resume']:
                time.sleep(3.0)


if __name__ == '__main__':
    unittest.main()
