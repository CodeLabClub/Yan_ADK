# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openadk.models.base_model_ import Model
from openadk.models.sensors_parameter import SensorsParameter  # noqa: F401,E501
from openadk import util


class SensorsOperationRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, operation=None, sensor=None):  # noqa: E501
        """SensorsOperationRequest - a model defined in Swagger

        :param operation: The operation of this SensorsOperationRequest.  # noqa: E501
        :type operation: str
        :param sensor: The sensor of this SensorsOperationRequest.  # noqa: E501
        :type sensor: SensorsParameter
        """
        self.swagger_types = {
            'operation': str,
            'sensor': SensorsParameter
        }

        self.attribute_map = {
            'operation': 'operation',
            'sensor': 'sensor'
        }

        self._operation = operation
        self._sensor = sensor

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SensorsOperationRequest of this SensorsOperationRequest.  # noqa: E501
        :rtype: SensorsOperationRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operation(self):
        """Gets the operation of this SensorsOperationRequest.

        操作类型，取值说明：calibrate（校准）和calibrate（修改传感器ID），目前只支持gyro校准。  # noqa: E501

        :return: The operation of this SensorsOperationRequest.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this SensorsOperationRequest.

        操作类型，取值说明：calibrate（校准）和calibrate（修改传感器ID），目前只支持gyro校准。  # noqa: E501

        :param operation: The operation of this SensorsOperationRequest.
        :type operation: str
        """
        allowed_values = ["calibrate", "modify"]  # noqa: E501
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def sensor(self):
        """Gets the sensor of this SensorsOperationRequest.


        :return: The sensor of this SensorsOperationRequest.
        :rtype: SensorsParameter
        """
        return self._sensor

    @sensor.setter
    def sensor(self, sensor):
        """Sets the sensor of this SensorsOperationRequest.


        :param sensor: The sensor of this SensorsOperationRequest.
        :type sensor: SensorsParameter
        """
        if sensor is None:
            raise ValueError("Invalid value for `sensor`, must not be `None`")  # noqa: E501

        self._sensor = sensor
