# coding: utf-8

"""
    Yanshee RESTful API

    Yanshee RESTful APIs是一套专门为编程爱好者提供二次开发的接口．它通过http/https的方式向外界提供机器人控制，传感器读取，机器人视觉等功能．用户还可以通过编程的方式训练自己的模型，学习一些机器学习的内容．  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: swenggroup@ubtrobot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openadk.models.name import Name  # noqa: F401,E501
from openadk.models.visions_analysis import VisionsAnalysis  # noqa: F401,E501
from openadk.models.visions_quantity import VisionsQuantity  # noqa: F401,E501


class VisionsResults(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'analysis': 'VisionsAnalysis',
        'recognition': 'Name',
        'quantity': 'VisionsQuantity'
    }

    attribute_map = {
        'analysis': 'analysis',
        'recognition': 'recognition',
        'quantity': 'quantity'
    }

    def __init__(self, analysis=None, recognition=None, quantity=None):  # noqa: E501
        """VisionsResults - a model defined in Swagger"""  # noqa: E501

        self._analysis = None
        self._recognition = None
        self._quantity = None
        self.discriminator = None

        if analysis is not None:
            self.analysis = analysis
        if recognition is not None:
            self.recognition = recognition
        if quantity is not None:
            self.quantity = quantity

    @property
    def analysis(self):
        """Gets the analysis of this VisionsResults.  # noqa: E501


        :return: The analysis of this VisionsResults.  # noqa: E501
        :rtype: VisionsAnalysis
        """
        return self._analysis

    @analysis.setter
    def analysis(self, analysis):
        """Sets the analysis of this VisionsResults.


        :param analysis: The analysis of this VisionsResults.  # noqa: E501
        :type: VisionsAnalysis
        """

        self._analysis = analysis

    @property
    def recognition(self):
        """Gets the recognition of this VisionsResults.  # noqa: E501


        :return: The recognition of this VisionsResults.  # noqa: E501
        :rtype: Name
        """
        return self._recognition

    @recognition.setter
    def recognition(self, recognition):
        """Sets the recognition of this VisionsResults.


        :param recognition: The recognition of this VisionsResults.  # noqa: E501
        :type: Name
        """

        self._recognition = recognition

    @property
    def quantity(self):
        """Gets the quantity of this VisionsResults.  # noqa: E501


        :return: The quantity of this VisionsResults.  # noqa: E501
        :rtype: VisionsQuantity
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this VisionsResults.


        :param quantity: The quantity of this VisionsResults.  # noqa: E501
        :type: VisionsQuantity
        """

        self._quantity = quantity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VisionsResults, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VisionsResults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
