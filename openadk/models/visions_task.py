# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openadk.models.base_model_ import Model
from openadk import util


class VisionsTask(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, type=None, option=None, operation=None):  # noqa: E501
        """VisionsTask - a model defined in Swagger

        :param type: The type of this VisionsTask.  # noqa: E501
        :type type: str
        :param option: The option of this VisionsTask.  # noqa: E501
        :type option: str
        :param operation: The operation of this VisionsTask.  # noqa: E501
        :type operation: str
        """
        self.swagger_types = {
            'type': str,
            'option': str,
            'operation': str
        }

        self.attribute_map = {
            'type': 'type',
            'option': 'option',
            'operation': 'operation'
        }

        self._type = type
        self._option = option
        self._operation = operation

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VisionsTask of this VisionsTask.  # noqa: E501
        :rtype: VisionsTask
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this VisionsTask.

        任务类型。 type 允许上传的值有 'tracking', 'recognition', 'gender_analysis', 'age_analysis', 'expression_analysis', 'quantity'   # noqa: E501

        :return: The type of this VisionsTask.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VisionsTask.

        任务类型。 type 允许上传的值有 'tracking', 'recognition', 'gender_analysis', 'age_analysis', 'expression_analysis', 'quantity'   # noqa: E501

        :param type: The type of this VisionsTask.
        :type type: str
        """
        allowed_values = ["tracking", "recognition", "age_analysis", "gender_analysis", "expression_analysis", "quantity"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def option(self):
        """Gets the option of this VisionsTask.

        任务名称。 option 允许上传的值有 'face', 'hand', 'object'。 组合限制：tracking任务支持face, recognition任务支持face, hand 与 object。quantity任务支持face与hand。 age_analysis, gender_analysis, age_analysis 与 expression_analysis只支持face  # noqa: E501

        :return: The option of this VisionsTask.
        :rtype: str
        """
        return self._option

    @option.setter
    def option(self, option):
        """Sets the option of this VisionsTask.

        任务名称。 option 允许上传的值有 'face', 'hand', 'object'。 组合限制：tracking任务支持face, recognition任务支持face, hand 与 object。quantity任务支持face与hand。 age_analysis, gender_analysis, age_analysis 与 expression_analysis只支持face  # noqa: E501

        :param option: The option of this VisionsTask.
        :type option: str
        """
        allowed_values = ["face", "hand", "object"]  # noqa: E501
        if option not in allowed_values:
            raise ValueError(
                "Invalid value for `option` ({0}), must be one of {1}"
                .format(option, allowed_values)
            )

        self._option = option

    @property
    def operation(self):
        """Gets the operation of this VisionsTask.

        执行命令。 operation 允许上传的值有 'start', 'stop'   # noqa: E501

        :return: The operation of this VisionsTask.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this VisionsTask.

        执行命令。 operation 允许上传的值有 'start', 'stop'   # noqa: E501

        :param operation: The operation of this VisionsTask.
        :type operation: str
        """
        allowed_values = ["start", "stop"]  # noqa: E501
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"
                .format(operation, allowed_values)
            )

        self._operation = operation
