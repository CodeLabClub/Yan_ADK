# coding: utf-8

"""
    Yanshee RESTful API

     ## Overview Yanshee RESTful APIs are generated by the [swagger-codegen](https://github.com/swagger-api/swagger-codegen) project. By using the [OpenAPI-Spec](https://github.com/swagger-api/swagger-core/wiki) from a remote server. The API service uses the [Connexion](https://github.com/zalando/connexion) library on top of Flask.  To provide the API service, Yanshee RESTful APIs are integrated into apollo package, it is a part of Yanshee-ROS framework. Yanshee RESTful APIs provided two language versions: - [English version](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_en/1.0.0) - [Chinese version](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_cn/1.0.0)  ## Requirements. Python 2.7 or 3.4+  ## Getting Started Please follow the [installation procedure](#installation--usage) and then run the following:  ``` from __future__ import print_function import time import openadk from openadk.rest import ApiException from pprint import pprint  # create an instance of the API class configuration = openadk.Configuration() configuration.host = 'http://192.168.1.100:9090/v1' api_instance = openadk.DevicesApi(openadk.ApiClient(configuration)) try:  # Get system's battery information  api_response = api_instance.get_devices_battery()  pprint(api_response) except ApiException as e:  print(\"Exception when calling DevicesApi->get_devices_battery: %s\" % e)  ```   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: swenggroup@ubtrobot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import unittest

import openadk
from openadk import Name, VisionsDeleteTags, VisionsGetRequest, VisionsPhoto
from openadk.api.visions_api import VisionsApi  # noqa: E501
from openadk.rest import ApiException
from pprint import pprint
from PIL import Image
from io import BytesIO
import time


class TestVisionsApi(unittest.TestCase):
    """VisionsApi unit test stubs"""

    def setUp(self):
        self.configuration = openadk.Configuration()
        self.configuration.host = 'http://192.168.1.104:9090/v1'
        self.api_instance = openadk.api.visions_api.VisionsApi(openadk.ApiClient(self.configuration))  # noqa: E501

    def tearDown(self):
        pass

    def test_delete_vision_photo(self):
        """Test case for delete_vision_photo

        Delete a photo based the name  # noqa: E501
        """
        try:
            test_file_list = ['ssss', 'hello', '123123', '@!@#!@#']
            for name in test_file_list:
                body = Name(name=name)
                api_response = self.api_instance.delete_vision_photo(body)
                print(api_response)
                self.assertEqual(20002, api_response.code)
                self.assertEqual('Resource not exist.', api_response.msg)

        except ApiException as e:
            print("Exception when calling VisionsApi->delete_vision_photo_samples: %s\n" % e)

    def test_delete_vision_photo_samples(self):
        """Test case for delete_vision_photo_samples

        Delete the uploaded sample  # noqa: E501
        """
        test_file_list = ['ssss', 'hello', '123123', '@!@#!@#']
        for name in test_file_list:
            body = openadk.Name(name=name)  # Name | ???? (optional)
            try:
                api_response = self.api_instance.delete_vision_photo_samples(body=body)
                pprint(api_response)
            except ApiException as e:
                print("Exception when calling VisionsApi->delete_vision_photo_samples: %s\n" % e)

    def test_delete_visions_streams(self):
        """Test case for delete_visions_streams

        Turn off the web stream for the camera  # noqa: E501
        """
        body = openadk.VisionsStream()  # VisionsStream |  (optional)
        try:
            api_response = self.api_instance.delete_visions_streams(body=body)
            pprint(api_response)
        except ApiException as e:
            print("Exception when calling VisionsApi->delete_visions_streams: %s\n" % e)

    def test_delete_visions_tags(self):
        """Test case for delete_visions_tags

        Delete a sample's tag based the tag name  # noqa: E501
        """
        test_tags_name = ['sss', '#$@#', '//1923\?']
        for tags in test_tags_name:
            body = VisionsDeleteTags(tags=tags)  # VisionsDeleteTags | ???? (optional)

            try:
                api_response = self.api_instance.delete_visions_tags(body=body)
                pprint(api_response)
            except ApiException as e:
                print("Exception when calling VisionsApi->delete_visions_tags: %s\n" % e)

    def test_get_photo_samples(self):
        """Test case for get_photo_samples

        Get all the uploaded photo samples  # noqa: E501
        """
        try:
            api_response = self.api_instance.get_photo_samples()
            pprint(api_response)
        except ApiException as e:
            print("Exception when calling VisionsApi->get_photo_samples: %s\n" % e)

    def test_get_vision(self):
        """Test case for get_vision

        Get compute vision result  # noqa: E501
        """
        option_list = ['face', 'hand', 'object']
        face_option_list = ['age_analysis', 'gender_analysis', 'expression_analysis', 'quantity', 'tracking', 'recognition']
        hand_option_list = ['quantity']
        object_option_list = ['recognition']

        for face_option in face_option_list:
            try:
                api_response = self.api_instance.get_vision(option=option_list[0], type=face_option)
                print(api_response)
            except ApiException as e:
                print("Exception when calling VisionsApi->get_vision: %s\n" % e)

        for hand_option in hand_option_list:
            try:
                api_response = self.api_instance.get_vision(option=option_list[1], type=hand_option)
                print(api_response)
            except ApiException as e:
                print("Exception when calling VisionsApi->get_vision: %s\n" % e)

        for object_option in object_option_list:
            try:
                api_response = self.api_instance.get_vision(option=option_list[2], type=object_option)
                print(api_response)
            except ApiException as e:
                print("Exception when calling VisionsApi->get_vision: %s\n" % e)

    def test_get_visions_photos(self):
        """Test case for get_visions_photos

        Get a specific photo based the name  # noqa: E501
        """
        try:
            # ??????
            body = 'img_20190410_062331_9896.jpg'
            api_response = self.api_instance.get_visions_photos(body=body, _preload_content=False)
            print(api_response.data)
            file = BytesIO(api_response.data)
            im = Image.open(file)
            im.save('C:\\Users\\ubt\\Pictures\\Screenshots\\test.jpg')
        except ApiException as e:
            print("Exception when calling VisionsApi->get_visions_photos: %s\n" % e)

    def test_get_visions_photos_lists(self):
        """Test case for get_visions_photos_lists

        Get the photo's list  # noqa: E501
        """
        try:
            #  ??????
            api_response = self.api_instance.get_visions_photos_lists()
            print(api_response)
        except ApiException as e:
            print("Exception when calling VisionsApi->get_visions_photos_lists: %s\n" % e)

    def test_get_visions_tags(self):
        """Test case for get_visions_tags

        Get all the tag list  # noqa: E501
        """
        try:
            # ?????????
            api_response = self.api_instance.get_visions_tags()
            print(api_response)
        except ApiException as e:
            print("Exception when calling VisionsApi->get_visions_tags: %s\n" % e)

    def test_post_vision_photo(self):
        """Test case for post_vision_photo

        Take a photo  # noqa: E501
        """
        body = openadk.VisionsPhoto(resolution='800X600')  # VisionsPhoto | 照片分辨率 (optional)

        try:
            # 拍一张照片
            for i in range(1):
                api_response = self.api_instance.post_vision_photo(body=body)
                pprint(api_response)
                # time.sleep(1)

        except ApiException as e:
            print("Exception when calling VisionsApi->post_vision_photo: %s\n" % e)
			
    def test_post_visions_photo_samples(self):
        """Test case for post_visions_photo_samples

        Upload photo sample  # noqa: E501
        """
        file = '/home/cygnus/timg.jpg'  # file | 上传文件

        try:
            # 上传样本
            api_response = self.api_instance.post_visions_photo_samples(file)
            pprint(api_response)
        except ApiException as e:
            print("Exception when calling VisionsApi->post_visions_photo_samples: %s\n" % e)

    def test_post_visions_streams(self):
        """Test case for post_visions_streams

        Turn on the web stream for the camera  # noqa: E501
        """
        pass

    def test_put_visions(self):
        """Test case for put_visions

        Start or stop a compute vision task  # noqa: E501
        """
        try:
            api_response = self.api_instance.put_visions()
            print(api_response)
        except ApiException as e:
            print("Exception when calling VisionsApi->put_visions: %s\n" % e)


    def test_put_visions_tags(self):
        """Test case for put_visions_tags

        Set the sample's tag  # noqa: E501
        """
        try:
            api_response = self.api_instance.put_visions_tags()
            print(api_response)
        except ApiException as e:
            print("Exception when calling VisionsApi->put_visions_tags: %s\n" % e)


if __name__ == '__main__':
    unittest.main()
