# coding: utf-8

"""
    Yanshee RESTful API

    Yanshee RESTful APIs是一套专门为编程爱好者提供二次开发的接口．它通过http/https的方式向外界提供机器人控制，传感器读取，机器人视觉等功能．用户还可以通过编程的方式训练自己的模型，学习一些机器学习的内容．  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: swenggroup@ubtrobot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MotionsParameter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'direction': 'str',
        'repeat': 'int',
        'speed': 'str'
    }

    attribute_map = {
        'name': 'name',
        'direction': 'direction',
        'repeat': 'repeat',
        'speed': 'speed'
    }

    def __init__(self, name=None, direction=None, repeat=1, speed='normal'):  # noqa: E501
        """MotionsParameter - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._direction = None
        self._repeat = None
        self._speed = None
        self.discriminator = None

        self.name = name
        if direction is not None:
            self.direction = direction
        if repeat is not None:
            self.repeat = repeat
        if speed is not None:
            self.speed = speed

    @property
    def name(self):
        """Gets the name of this MotionsParameter.  # noqa: E501

        动作名称,除了内置动作还有:raise/crouch/stretch/come on/wave/bend/walk/turn around/head/bow  # noqa: E501

        :return: The name of this MotionsParameter.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MotionsParameter.

        动作名称,除了内置动作还有:raise/crouch/stretch/come on/wave/bend/walk/turn around/head/bow  # noqa: E501

        :param name: The name of this MotionsParameter.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def direction(self):
        """Gets the direction of this MotionsParameter.  # noqa: E501

        部分动作有方向属性，取值说明：（1）left 只适用于name取值为raise, stretch, come on, wave, bend, turn around, walk, head；（2）right 只适用于name取值为：raise, stretch, come on, wave, bend, turn around, walk, head；（3）both  只适用于name取值为：raise, stretch, come on, wave；（4）front 只适用于name取值为：walk, head；（5）back 只适用name取值为： walk；  # noqa: E501

        :return: The direction of this MotionsParameter.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this MotionsParameter.

        部分动作有方向属性，取值说明：（1）left 只适用于name取值为raise, stretch, come on, wave, bend, turn around, walk, head；（2）right 只适用于name取值为：raise, stretch, come on, wave, bend, turn around, walk, head；（3）both  只适用于name取值为：raise, stretch, come on, wave；（4）front 只适用于name取值为：walk, head；（5）back 只适用name取值为： walk；  # noqa: E501

        :param direction: The direction of this MotionsParameter.  # noqa: E501
        :type: str
        """
        allowed_values = ["left", "right", "both", "front", "back"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"  # noqa: E501
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def repeat(self):
        """Gets the repeat of this MotionsParameter.  # noqa: E501

        动作重复执行的次数  # noqa: E501

        :return: The repeat of this MotionsParameter.  # noqa: E501
        :rtype: int
        """
        return self._repeat

    @repeat.setter
    def repeat(self, repeat):
        """Sets the repeat of this MotionsParameter.

        动作重复执行的次数  # noqa: E501

        :param repeat: The repeat of this MotionsParameter.  # noqa: E501
        :type: int
        """
        if repeat is not None and repeat > 100:  # noqa: E501
            raise ValueError("Invalid value for `repeat`, must be a value less than or equal to `100`")  # noqa: E501
        if repeat is not None and repeat < 1:  # noqa: E501
            raise ValueError("Invalid value for `repeat`, must be a value greater than or equal to `1`")  # noqa: E501

        self._repeat = repeat

    @property
    def speed(self):
        """Gets the speed of this MotionsParameter.  # noqa: E501

        部分动作(raise/crouch/stretch/come on/wave/bend/walk/turn around/head/bow)可设置运动速度  # noqa: E501

        :return: The speed of this MotionsParameter.  # noqa: E501
        :rtype: str
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this MotionsParameter.

        部分动作(raise/crouch/stretch/come on/wave/bend/walk/turn around/head/bow)可设置运动速度  # noqa: E501

        :param speed: The speed of this MotionsParameter.  # noqa: E501
        :type: str
        """
        allowed_values = ["very slow", "slow", "normal", "fast", "very fast"]  # noqa: E501
        if speed not in allowed_values:
            raise ValueError(
                "Invalid value for `speed` ({0}), must be one of {1}"  # noqa: E501
                .format(speed, allowed_values)
            )

        self._speed = speed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MotionsParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MotionsParameter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
