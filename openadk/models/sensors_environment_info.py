# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openadk.models.base_model_ import Model
from openadk import util


class SensorsEnvironmentInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id=None, temperature=None, humidity=None, pressure=None):  # noqa: E501
        """SensorsEnvironmentInfo - a model defined in Swagger

        :param id: The id of this SensorsEnvironmentInfo.  # noqa: E501
        :type id: int
        :param temperature: The temperature of this SensorsEnvironmentInfo.  # noqa: E501
        :type temperature: int
        :param humidity: The humidity of this SensorsEnvironmentInfo.  # noqa: E501
        :type humidity: int
        :param pressure: The pressure of this SensorsEnvironmentInfo.  # noqa: E501
        :type pressure: int
        """
        self.swagger_types = {
            'id': int,
            'temperature': int,
            'humidity': int,
            'pressure': int
        }

        self.attribute_map = {
            'id': 'id',
            'temperature': 'temperature',
            'humidity': 'humidity',
            'pressure': 'pressure'
        }

        self._id = id
        self._temperature = temperature
        self._humidity = humidity
        self._pressure = pressure

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SensorsEnvironmentInfo of this SensorsEnvironmentInfo.  # noqa: E501
        :rtype: SensorsEnvironmentInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this SensorsEnvironmentInfo.


        :return: The id of this SensorsEnvironmentInfo.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SensorsEnvironmentInfo.


        :param id: The id of this SensorsEnvironmentInfo.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if id is not None and id > 127:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value less than or equal to `127`")  # noqa: E501
        if id is not None and id < 1:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def temperature(self):
        """Gets the temperature of this SensorsEnvironmentInfo.


        :return: The temperature of this SensorsEnvironmentInfo.
        :rtype: int
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this SensorsEnvironmentInfo.


        :param temperature: The temperature of this SensorsEnvironmentInfo.
        :type temperature: int
        """
        if temperature is None:
            raise ValueError("Invalid value for `temperature`, must not be `None`")  # noqa: E501

        self._temperature = temperature

    @property
    def humidity(self):
        """Gets the humidity of this SensorsEnvironmentInfo.


        :return: The humidity of this SensorsEnvironmentInfo.
        :rtype: int
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity):
        """Sets the humidity of this SensorsEnvironmentInfo.


        :param humidity: The humidity of this SensorsEnvironmentInfo.
        :type humidity: int
        """
        if humidity is None:
            raise ValueError("Invalid value for `humidity`, must not be `None`")  # noqa: E501

        self._humidity = humidity

    @property
    def pressure(self):
        """Gets the pressure of this SensorsEnvironmentInfo.


        :return: The pressure of this SensorsEnvironmentInfo.
        :rtype: int
        """
        return self._pressure

    @pressure.setter
    def pressure(self, pressure):
        """Sets the pressure of this SensorsEnvironmentInfo.


        :param pressure: The pressure of this SensorsEnvironmentInfo.
        :type pressure: int
        """

        self._pressure = pressure
