# coding: utf-8

"""
    Yanshee RESTful API

    Yanshee RESTful APIs是一套专门为编程爱好者提供二次开发的接口．它通过http/https的方式向外界提供机器人控制，传感器读取，机器人视觉等功能．用户还可以通过编程的方式训练自己的模型，学习一些机器学习的内容．  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: swenggroup@ubtrobot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VisionsTask(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'operation': 'str',
        'option': 'str',
        'timestamp': 'int'
    }

    attribute_map = {
        'type': 'type',
        'operation': 'operation',
        'option': 'option',
        'timestamp': 'timestamp'
    }

    def __init__(self, type=None, operation=None, option=None, timestamp=None):  # noqa: E501
        """VisionsTask - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._operation = None
        self._option = None
        self._timestamp = None
        self.discriminator = None

        self.type = type
        self.operation = operation
        if option is not None:
            self.option = option
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def type(self):
        """Gets the type of this VisionsTask.  # noqa: E501

        任务类型。 type 允许上传的值有 'tracking', 'recognition', 'gender_analysis', 'age_analysis', 'expression_analysis', 'group_analysis' 'quantity'   # noqa: E501

        :return: The type of this VisionsTask.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VisionsTask.

        任务类型。 type 允许上传的值有 'tracking', 'recognition', 'gender_analysis', 'age_analysis', 'expression_analysis', 'group_analysis' 'quantity'   # noqa: E501

        :param type: The type of this VisionsTask.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["tracking", "recognition", "age_analysis", "gender_analysis", "group_analysis", "expression_analysis", "quantity", "color_detect"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def operation(self):
        """Gets the operation of this VisionsTask.  # noqa: E501

        执行命令。 operation 允许上传的值有 'start', 'stop'   # noqa: E501

        :return: The operation of this VisionsTask.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this VisionsTask.

        执行命令。 operation 允许上传的值有 'start', 'stop'   # noqa: E501

        :param operation: The operation of this VisionsTask.  # noqa: E501
        :type: str
        """
        if operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501
        allowed_values = ["start", "stop"]  # noqa: E501
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"  # noqa: E501
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def option(self):
        """Gets the option of this VisionsTask.  # noqa: E501

        任务名称。 option 允许上传的值有 'face', 'hand', 'object'。 组合限制：tracking任务支持face, recognition任务支持face, hand 与 object。quantity任务支持face与hand。 age_analysis, gender_analysis, age_analysis 与 expression_analysis只支持face。 color只支持color_detect。  # noqa: E501

        :return: The option of this VisionsTask.  # noqa: E501
        :rtype: str
        """
        return self._option

    @option.setter
    def option(self, option):
        """Sets the option of this VisionsTask.

        任务名称。 option 允许上传的值有 'face', 'hand', 'object'。 组合限制：tracking任务支持face, recognition任务支持face, hand 与 object。quantity任务支持face与hand。 age_analysis, gender_analysis, age_analysis 与 expression_analysis只支持face。 color只支持color_detect。  # noqa: E501

        :param option: The option of this VisionsTask.  # noqa: E501
        :type: str
        """
        allowed_values = ["face", "hand", "object", "color"]  # noqa: E501
        if option not in allowed_values:
            raise ValueError(
                "Invalid value for `option` ({0}), must be one of {1}"  # noqa: E501
                .format(option, allowed_values)
            )

        self._option = option

    @property
    def timestamp(self):
        """Gets the timestamp of this VisionsTask.  # noqa: E501

        视觉任务时间戳  # noqa: E501

        :return: The timestamp of this VisionsTask.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this VisionsTask.

        视觉任务时间戳  # noqa: E501

        :param timestamp: The timestamp of this VisionsTask.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VisionsTask, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VisionsTask):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
