# coding: utf-8

"""
    Yanshee RESTful API

     ## Overview Yanshee RESTful APIs are generated by the [swagger-codegen](https://github.com/swagger-api/swagger-codegen) project. By using the [OpenAPI-Spec](https://github.com/swagger-api/swagger-core/wiki) from a remote server. The API service uses the [Connexion](https://github.com/zalando/connexion) library on top of Flask.  To provide the API service, Yanshee RESTful APIs are integrated into apollo package, it is a part of Yanshee-ROS framework. Yanshee RESTful APIs provided two language versions: - [English version](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_en/1.0.0) - [Chinese version](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_cn/1.0.0)  ## Requirements. Python 2.7 or 3.4+  ## Getting Started Please follow the [installation procedure](#installation--usage) and then run the following:  ``` from __future__ import print_function import time import openadk from openadk.rest import ApiException from pprint import pprint  # create an instance of the API class configuration = openadk.Configuration() configuration.host = 'http://192.168.1.100:9090/v1' api_instance = openadk.DevicesApi(openadk.ApiClient(configuration)) try:  # Get system's battery information  api_response = api_instance.get_devices_battery()  pprint(api_response) except ApiException as e:  print(\"Exception when calling DevicesApi->get_devices_battery: %s\" % e)  ```   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: swenggroup@ubtrobot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import unittest
from pprint import pprint

import openadk
from openadk.api.voice_api import VoiceApi  # noqa: E501
from openadk.models.voice_asr_option import VoiceAsrOption
from openadk.rest import ApiException
import time
from openadk.models.voice_iat_request import VoiceIatRequest
from openadk.models.voice_tts_str import VoiceTTSStr


class TestVoiceApi(unittest.TestCase):
    """VoiceApi unit test stubs"""

    def setUp(self):
        self.configuration = openadk.Configuration()
        self.configuration.host = 'http://10.10.63.105:9090/v1'
        self.api_instance = VoiceApi(openadk.ApiClient(self.configuration))  # noqa: E501

    def tearDown(self):
        pass

    def test_delete_voice_asr(self):
        """Test case for delete_voice_asr

        Stop automatic speech recognition  # noqa: E501
        """
        timestamp = int(time.time())
        body = VoiceAsrOption(continues=True, timestamp=timestamp)
        self.api_instance.put_voice_asr(body=body)

        ret = self.api_instance.delete_voice_asr()
        self.assertEqual(ret.code, 0, ret)

    def test_delete_voice_iat(self):
        """Test case for delete_voice_iat

        Stop auto transform  # noqa: E501
        """
        timestamp = int(time.time())
        body = VoiceIatRequest(timestamp=timestamp)
        ret = self.api_instance.put_voice_iat(body=body)
        self.assertEqual(ret.code, 0, ret)

        ret = self.api_instance.delete_voice_iat()
        self.assertEqual(ret.code, 0, ret)

    def test_delete_voice_tts(self):
        """Test case for delete_voice_tts

        Stop all text to speech  # noqa: E501
        """
        tts = '江山如此多娇，引无数英雄竞折腰'
        timestamp = int(time.time())
        body = VoiceTTSStr(tts=tts, interrupt=True, timestamp=timestamp)
        ret = self.api_instance.put_voice_tts(body)
        self.assertEqual(ret.code, 0, ret)

        ret = self.api_instance.delete_voice_tts()
        self.assertEqual(ret.code, 0, ret)

    def test_get_voice_asr(self):
        """Test case for get_voice_asr

        Get automatic speech recognition working status  # noqa: E501
        """
        # 开始语义理解
        timestamp = int(time.time())
        body = VoiceAsrOption(continues=True, timestamp=timestamp)
        self.api_instance.put_voice_asr(body=body)
        # 获取语义理解工作状态
        ret = self.api_instance.get_voice_asr()
        self.assertEqual(ret.code, 0, ret)
        self.assertEqual(ret.status, 'run', ret)
        time.sleep(1.0)

        # 停止语义理解
        ret = self.api_instance.delete_voice_asr()
        self.assertEqual(ret.code, 0, ret)
        # 获取语义理解工作状态
        ret = self.api_instance.get_voice_asr()
        self.assertEqual(ret.code, 0, ret)
        self.assertEqual(ret.status, 'idle', ret)

    def test_get_voice_iat(self):
        """Test case for get_voice_iat

        Get auto transform(iat) result  # noqa: E501
        """
        # 开始语音听写
        timestamp = int(time.time())
        body = VoiceIatRequest(timestamp=timestamp)
        ret = self.api_instance.put_voice_iat(body=body)
        self.assertEqual(ret.code, 0, ret)
        # 获取语音听写结果
        ret = self.api_instance.get_voice_iat()
        self.assertEqual(ret.code, 0, ret)
        self.assertEqual(ret.status, 'run', ret)
        time.sleep(1.0)

        # 停止语音听写
        ret = self.api_instance.delete_voice_iat()
        self.assertEqual(ret.code, 0, ret)
        # 获取语音听写结果
        ret = self.api_instance.get_voice_iat()
        self.assertEqual(ret.code, 0, ret)
        self.assertEqual(ret.status, 'idle', ret)

    def test_get_voice_tts(self):
        """Test case for get_voice_tts

        Get specified or current working status  # noqa: E501
        """
        # 开始语音合成任务
        tts = '江山如此多娇，引无数英雄竞折腰'
        timestamp = int(time.time())
        body = VoiceTTSStr(tts=tts, interrupt=True, timestamp=timestamp)
        ret = self.api_instance.put_voice_tts(body)
        self.assertEqual(ret.code, 0, ret)
        # 获取当前语音合成工作状态
        ret = self.api_instance.get_voice_tts(timestamp=timestamp)
        self.assertEqual(ret.code, 0, ret)
        self.assertEqual(ret.status, 'build', ret)
        # 合成所需时长与tts文本长度有关
        time.sleep(0.5)
        # 获取当前语音合成工作状态
        ret = self.api_instance.get_voice_tts(timestamp=timestamp)
        self.assertEqual(ret.code, 0, ret)
        self.assertEqual(ret.status, 'run', ret)
        time.sleep(3.0)
        # 获取当前语音合成工作状态
        ret = self.api_instance.get_voice_tts(timestamp=timestamp)
        self.assertEqual(ret.code, 0, ret)
        self.assertEqual(ret.status, 'idle', ret)

    def test_put_voice_asr(self):
        """Test case for put_voice_asr

        Start automatic speech recognition  # noqa: E501
        """
        # 开始语义理解
        timestamp = int(time.time())
        body = VoiceAsrOption(continues=True, timestamp=timestamp)
        self.api_instance.put_voice_asr(body=body)

        # 停止语义理解
        ret = self.api_instance.delete_voice_asr()
        self.assertEqual(ret.code, 0, ret)

    def test_put_voice_iat(self):
        """Test case for put_voice_iat

        Start auto transform  # noqa: E501
        """
        # 开始语音听写
        timestamp = int(time.time())
        body = VoiceIatRequest(timestamp=timestamp)
        ret = self.api_instance.put_voice_iat(body=body)
        self.assertEqual(ret.code, 0, ret)

        # 停止语音听写
        ret = self.api_instance.delete_voice_iat()
        self.assertEqual(ret.code, 0, ret)

    def test_put_voice_tts(self):
        """Test case for put_voice_tts

        Start text to speech  # noqa: E501
        """
        # 开始语音合成任务
        tts = '江山如此多娇，引无数英雄竞折腰'
        timestamp = int(time.time())
        body = VoiceTTSStr(tts=tts, interrupt=True, timestamp=timestamp)
        ret = self.api_instance.put_voice_tts(body)
        self.assertEqual(ret.code, 0, ret)
        time.sleep(3.0)


if __name__ == '__main__':
    unittest.main()
