# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openadk.models.base_model_ import Model
from openadk import util


class SubscriptionSensorsGyroInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id=None, gyro_x=None, gyro_y=None, gyro_z=None, accel_x=None, accel_y=None, accel_z=None, compass_x=None, compass_y=None, compass_z=None, euler_x=None, euler_y=None, euler_z=None):  # noqa: E501
        """SubscriptionSensorsGyroInfo - a model defined in Swagger

        :param id: The id of this SubscriptionSensorsGyroInfo.  # noqa: E501
        :type id: int
        :param gyro_x: The gyro_x of this SubscriptionSensorsGyroInfo.  # noqa: E501
        :type gyro_x: float
        :param gyro_y: The gyro_y of this SubscriptionSensorsGyroInfo.  # noqa: E501
        :type gyro_y: float
        :param gyro_z: The gyro_z of this SubscriptionSensorsGyroInfo.  # noqa: E501
        :type gyro_z: float
        :param accel_x: The accel_x of this SubscriptionSensorsGyroInfo.  # noqa: E501
        :type accel_x: float
        :param accel_y: The accel_y of this SubscriptionSensorsGyroInfo.  # noqa: E501
        :type accel_y: float
        :param accel_z: The accel_z of this SubscriptionSensorsGyroInfo.  # noqa: E501
        :type accel_z: float
        :param compass_x: The compass_x of this SubscriptionSensorsGyroInfo.  # noqa: E501
        :type compass_x: float
        :param compass_y: The compass_y of this SubscriptionSensorsGyroInfo.  # noqa: E501
        :type compass_y: float
        :param compass_z: The compass_z of this SubscriptionSensorsGyroInfo.  # noqa: E501
        :type compass_z: float
        :param euler_x: The euler_x of this SubscriptionSensorsGyroInfo.  # noqa: E501
        :type euler_x: float
        :param euler_y: The euler_y of this SubscriptionSensorsGyroInfo.  # noqa: E501
        :type euler_y: float
        :param euler_z: The euler_z of this SubscriptionSensorsGyroInfo.  # noqa: E501
        :type euler_z: float
        """
        self.swagger_types = {
            'id': int,
            'gyro_x': float,
            'gyro_y': float,
            'gyro_z': float,
            'accel_x': float,
            'accel_y': float,
            'accel_z': float,
            'compass_x': float,
            'compass_y': float,
            'compass_z': float,
            'euler_x': float,
            'euler_y': float,
            'euler_z': float
        }

        self.attribute_map = {
            'id': 'id',
            'gyro_x': 'gyro-x',
            'gyro_y': 'gyro-y',
            'gyro_z': 'gyro-z',
            'accel_x': 'accel-x',
            'accel_y': 'accel-y',
            'accel_z': 'accel-z',
            'compass_x': 'compass-x',
            'compass_y': 'compass-y',
            'compass_z': 'compass-z',
            'euler_x': 'euler-x',
            'euler_y': 'euler-y',
            'euler_z': 'euler-z'
        }

        self._id = id
        self._gyro_x = gyro_x
        self._gyro_y = gyro_y
        self._gyro_z = gyro_z
        self._accel_x = accel_x
        self._accel_y = accel_y
        self._accel_z = accel_z
        self._compass_x = compass_x
        self._compass_y = compass_y
        self._compass_z = compass_z
        self._euler_x = euler_x
        self._euler_y = euler_y
        self._euler_z = euler_z

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SubscriptionSensorsGyroInfo of this SubscriptionSensorsGyroInfo.  # noqa: E501
        :rtype: SubscriptionSensorsGyroInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this SubscriptionSensorsGyroInfo.


        :return: The id of this SubscriptionSensorsGyroInfo.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubscriptionSensorsGyroInfo.


        :param id: The id of this SubscriptionSensorsGyroInfo.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if id is not None and id > 127:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value less than or equal to `127`")  # noqa: E501
        if id is not None and id < 1:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def gyro_x(self):
        """Gets the gyro_x of this SubscriptionSensorsGyroInfo.


        :return: The gyro_x of this SubscriptionSensorsGyroInfo.
        :rtype: float
        """
        return self._gyro_x

    @gyro_x.setter
    def gyro_x(self, gyro_x):
        """Sets the gyro_x of this SubscriptionSensorsGyroInfo.


        :param gyro_x: The gyro_x of this SubscriptionSensorsGyroInfo.
        :type gyro_x: float
        """

        self._gyro_x = gyro_x

    @property
    def gyro_y(self):
        """Gets the gyro_y of this SubscriptionSensorsGyroInfo.


        :return: The gyro_y of this SubscriptionSensorsGyroInfo.
        :rtype: float
        """
        return self._gyro_y

    @gyro_y.setter
    def gyro_y(self, gyro_y):
        """Sets the gyro_y of this SubscriptionSensorsGyroInfo.


        :param gyro_y: The gyro_y of this SubscriptionSensorsGyroInfo.
        :type gyro_y: float
        """

        self._gyro_y = gyro_y

    @property
    def gyro_z(self):
        """Gets the gyro_z of this SubscriptionSensorsGyroInfo.


        :return: The gyro_z of this SubscriptionSensorsGyroInfo.
        :rtype: float
        """
        return self._gyro_z

    @gyro_z.setter
    def gyro_z(self, gyro_z):
        """Sets the gyro_z of this SubscriptionSensorsGyroInfo.


        :param gyro_z: The gyro_z of this SubscriptionSensorsGyroInfo.
        :type gyro_z: float
        """

        self._gyro_z = gyro_z

    @property
    def accel_x(self):
        """Gets the accel_x of this SubscriptionSensorsGyroInfo.


        :return: The accel_x of this SubscriptionSensorsGyroInfo.
        :rtype: float
        """
        return self._accel_x

    @accel_x.setter
    def accel_x(self, accel_x):
        """Sets the accel_x of this SubscriptionSensorsGyroInfo.


        :param accel_x: The accel_x of this SubscriptionSensorsGyroInfo.
        :type accel_x: float
        """

        self._accel_x = accel_x

    @property
    def accel_y(self):
        """Gets the accel_y of this SubscriptionSensorsGyroInfo.


        :return: The accel_y of this SubscriptionSensorsGyroInfo.
        :rtype: float
        """
        return self._accel_y

    @accel_y.setter
    def accel_y(self, accel_y):
        """Sets the accel_y of this SubscriptionSensorsGyroInfo.


        :param accel_y: The accel_y of this SubscriptionSensorsGyroInfo.
        :type accel_y: float
        """

        self._accel_y = accel_y

    @property
    def accel_z(self):
        """Gets the accel_z of this SubscriptionSensorsGyroInfo.


        :return: The accel_z of this SubscriptionSensorsGyroInfo.
        :rtype: float
        """
        return self._accel_z

    @accel_z.setter
    def accel_z(self, accel_z):
        """Sets the accel_z of this SubscriptionSensorsGyroInfo.


        :param accel_z: The accel_z of this SubscriptionSensorsGyroInfo.
        :type accel_z: float
        """

        self._accel_z = accel_z

    @property
    def compass_x(self):
        """Gets the compass_x of this SubscriptionSensorsGyroInfo.


        :return: The compass_x of this SubscriptionSensorsGyroInfo.
        :rtype: float
        """
        return self._compass_x

    @compass_x.setter
    def compass_x(self, compass_x):
        """Sets the compass_x of this SubscriptionSensorsGyroInfo.


        :param compass_x: The compass_x of this SubscriptionSensorsGyroInfo.
        :type compass_x: float
        """

        self._compass_x = compass_x

    @property
    def compass_y(self):
        """Gets the compass_y of this SubscriptionSensorsGyroInfo.


        :return: The compass_y of this SubscriptionSensorsGyroInfo.
        :rtype: float
        """
        return self._compass_y

    @compass_y.setter
    def compass_y(self, compass_y):
        """Sets the compass_y of this SubscriptionSensorsGyroInfo.


        :param compass_y: The compass_y of this SubscriptionSensorsGyroInfo.
        :type compass_y: float
        """

        self._compass_y = compass_y

    @property
    def compass_z(self):
        """Gets the compass_z of this SubscriptionSensorsGyroInfo.


        :return: The compass_z of this SubscriptionSensorsGyroInfo.
        :rtype: float
        """
        return self._compass_z

    @compass_z.setter
    def compass_z(self, compass_z):
        """Sets the compass_z of this SubscriptionSensorsGyroInfo.


        :param compass_z: The compass_z of this SubscriptionSensorsGyroInfo.
        :type compass_z: float
        """

        self._compass_z = compass_z

    @property
    def euler_x(self):
        """Gets the euler_x of this SubscriptionSensorsGyroInfo.


        :return: The euler_x of this SubscriptionSensorsGyroInfo.
        :rtype: float
        """
        return self._euler_x

    @euler_x.setter
    def euler_x(self, euler_x):
        """Sets the euler_x of this SubscriptionSensorsGyroInfo.


        :param euler_x: The euler_x of this SubscriptionSensorsGyroInfo.
        :type euler_x: float
        """
        if euler_x is None:
            raise ValueError("Invalid value for `euler_x`, must not be `None`")  # noqa: E501

        self._euler_x = euler_x

    @property
    def euler_y(self):
        """Gets the euler_y of this SubscriptionSensorsGyroInfo.


        :return: The euler_y of this SubscriptionSensorsGyroInfo.
        :rtype: float
        """
        return self._euler_y

    @euler_y.setter
    def euler_y(self, euler_y):
        """Sets the euler_y of this SubscriptionSensorsGyroInfo.


        :param euler_y: The euler_y of this SubscriptionSensorsGyroInfo.
        :type euler_y: float
        """
        if euler_y is None:
            raise ValueError("Invalid value for `euler_y`, must not be `None`")  # noqa: E501

        self._euler_y = euler_y

    @property
    def euler_z(self):
        """Gets the euler_z of this SubscriptionSensorsGyroInfo.


        :return: The euler_z of this SubscriptionSensorsGyroInfo.
        :rtype: float
        """
        return self._euler_z

    @euler_z.setter
    def euler_z(self, euler_z):
        """Sets the euler_z of this SubscriptionSensorsGyroInfo.


        :param euler_z: The euler_z of this SubscriptionSensorsGyroInfo.
        :type euler_z: float
        """
        if euler_z is None:
            raise ValueError("Invalid value for `euler_z`, must not be `None`")  # noqa: E501

        self._euler_z = euler_z
