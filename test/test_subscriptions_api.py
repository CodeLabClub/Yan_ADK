# coding: utf-8

"""
    Yanshee RESTful API

     ## Overview Yanshee RESTful APIs are generated by the [swagger-codegen](https://github.com/swagger-api/swagger-codegen) project. By using the [OpenAPI-Spec](https://github.com/swagger-api/swagger-core/wiki) from a remote server. The API service uses the [Connexion](https://github.com/zalando/connexion) library on top of Flask.  To provide the API service, Yanshee RESTful APIs are integrated into apollo package, it is a part of Yanshee-ROS framework. Yanshee RESTful APIs provided two language versions: - [English version](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_en/1.0.0) - [Chinese version](https://app.swaggerhub.com/apis-docs/UBTEDU/apollo_cn/1.0.0)  ## Requirements. Python 2.7 or 3.4+  ## Getting Started Please follow the [installation procedure](#installation--usage) and then run the following:  ``` from __future__ import print_function import time import openadk from openadk.rest import ApiException from pprint import pprint  # create an instance of the API class configuration = openadk.Configuration() configuration.host = 'http://192.168.1.100:9090/v1' api_instance = openadk.DevicesApi(openadk.ApiClient(configuration)) try:  # Get system's battery information  api_response = api_instance.get_devices_battery()  pprint(api_response) except ApiException as e:  print(\"Exception when calling DevicesApi->get_devices_battery: %s\" % e)  ```   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: swenggroup@ubtrobot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import unittest

import openadk
from openadk.api.subscriptions_api import SubscriptionsApi  # noqa: E501
from openadk.rest import ApiException

from openadk.models.subscriptions_motions_delete import SubscriptionsMotionsDelete
from openadk.models.subscriptions_sensors_delete import SubscriptionsSensorsDelete
from openadk.models.subscriptions_visions_delete import SubscriptionsVisionsDelete
from openadk.models.subscriptions_asr_voice_delete import SubscriptionsAsrVoiceDelete
from openadk.models.subscriptions_iat_voice_delete import SubscriptionsIatVoiceDelete
from openadk.models.subscriptions_tts_voice_delete import SubscriptionsTtsVoiceDelete
from openadk.models.subscriptions_motions import SubscriptionsMotions
from openadk.models.subscriptions_sensors import SubscriptionsSensors
from openadk.models.subscriptions_visions import SubscriptionsVisions
from openadk.models.subscriptions_asr_voice import SubscriptionsAsrVoice
from openadk.models.subscriptions_iat_voice import SubscriptionsIatVoice
from openadk.models.subscriptions_tts_voice import SubscriptionsTtsVoice


class TestSubscriptionsApi(unittest.TestCase):
    """SubscriptionsApi unit test stubs"""

    def setUp(self):
        self.configuration = openadk.Configuration()
        self.configuration.host = 'http://10.10.63.105:9090/v1'
        self.api_instance = SubscriptionsApi(openadk.ApiClient(self.configuration))  # noqa: E501

    def tearDown(self):
        pass

    def test_delete_motions_subscription(self):
        """Test case for delete_motions_subscription

        Unsubscribe the motion status  # noqa: E501
        """
        body = SubscriptionsMotionsDelete(url="http://10.10.67.98:8080/subscriptions/motions")
        ret = self.api_instance.delete_motions_subscription(body=body)
        self.assertEqual(ret.code, 147, ret)

    def test_delete_sensors_subscription(self):
        """Test case for delete_sensors_subscription

        Unsubscribe the sensor's value  # noqa: E501
        """
        url = "http://10.10.67.98:8080/subscriptions/sensors"
        body = SubscriptionsSensorsDelete(type='infrared', id=27, slot=1, url=url, timeval=1000)
        ret = self.api_instance.delete_sensors_subscription(body=body)
        self.assertEqual(ret.code, 147, ret)

    def test_delete_visions_subscription(self):
        """Test case for delete_visions_subscription

        Unsubscribe compute vision result  # noqa: E501
        """
        url = "http://10.10.67.98:8080/subscriptions/visions"
        body = SubscriptionsVisionsDelete(type='face_recognition', url=url)
        ret = self.api_instance.delete_visions_subscription(body=body)
        self.assertEqual(ret.code, 147, ret)

    def test_delete_voice_asr_subscription(self):
        """Test case for delete_voice_asr_subscription

        Unsubscribe auto speech recognition result  # noqa: E501
        """
        body = SubscriptionsAsrVoiceDelete(url="http://10.10.67.98:8080/subscriptions/voice/asr")
        ret = self.api_instance.delete_voice_asr_subscription(body=body)
        self.assertEqual(ret.code, 147, ret)

    def test_delete_voice_iat_subscription(self):
        """Test case for delete_voice_iat_subscription

        Unsubscribe auto transform result  # noqa: E501
        """
        body = SubscriptionsIatVoiceDelete(url="http://10.10.67.98:8080/subscriptions/voice/iat")
        ret = self.api_instance.delete_voice_iat_subscription(body=body)
        self.assertEqual(ret.code, 147, ret)

    def test_delete_voice_tts_subscription(self):
        """Test case for delete_voice_tts_subscription

        Unsubscribe text to speech result  # noqa: E501
        """
        body = SubscriptionsTtsVoiceDelete(url="http://10.10.67.98:8080/subscriptions/voice/tts")
        ret = self.api_instance.delete_voice_tts_subscription(body=body)
        self.assertEqual(ret.code, 147, ret)

    def test_post_motions_subscription(self):
        """Test case for post_motions_subscription

        Subscribe the motion status  # noqa: E501
        """
        body = SubscriptionsMotions(url="http://10.10.67.98:8080/subscriptions/motions", timeout=1)
        ret = self.api_instance.post_motions_subscription(body=body)
        self.assertEqual(ret.code, 142, ret)

    def test_post_sensors_subscription(self):
        """Test case for post_sensors_subscription

        Subscribe the sensor's value  # noqa: E501
        """
        url = "http://10.10.67.98:8080/subscriptions/sensors"
        body = SubscriptionsSensors(type='infrared', id=27, slot=1, url=url, timeout=1, timeval=1000)
        ret = self.api_instance.post_sensors_subscription(body=body)
        self.assertEqual(ret.code, 142, ret)

    def test_post_visions_subscription(self):
        """Test case for post_visions_subscription

        Subscribe compute vision result  # noqa: E501
        """
        url = "http://10.10.67.98:8080/subscriptions/visions"
        body = SubscriptionsVisions(type='face_recognition', url=url, timeout=1)
        ret = self.api_instance.post_visions_subscription(body=body)
        self.assertEqual(ret.code, 142, ret)

    def test_post_voice_asr_subscriptions(self):
        """Test case for post_voice_asr_subscriptions

        Subscribe auto speech recognition result  # noqa: E501
        """
        body = SubscriptionsAsrVoice(url="http://10.10.67.98:8080/subscriptions/voice/asr", timeout=1)
        ret = self.api_instance.post_voice_asr_subscriptions(body=body)
        self.assertEqual(ret.code, 142, ret)

    def test_post_voice_iat_subscription(self):
        """Test case for post_voice_iat_subscription

        Subscribe auto transform result  # noqa: E501
        """
        body = SubscriptionsIatVoice(url="http://10.10.67.98:8080/subscriptions/voice/iat", timeout=1)
        ret = self.api_instance.post_voice_iat_subscription(body=body)
        self.assertEqual(ret.code, 142, ret)

    def test_post_voice_tts_subscriptions(self):
        """Test case for post_voice_tts_subscriptions

        Subscribe text to speech result  # noqa: E501
        """
        body = SubscriptionsTtsVoice(url="http://10.10.67.98:8080/subscriptions/voice/tts", timeout=1)
        ret = self.api_instance.post_voice_tts_subscriptions(body=body)
        self.assertEqual(ret.code, 142, ret)


if __name__ == '__main__':
    unittest.main()
