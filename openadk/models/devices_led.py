# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openadk.models.base_model_ import Model
from openadk import util


class DevicesLED(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, type='button', color='white', mode='on'):  # noqa: E501
        """DevicesLED - a model defined in Swagger

        :param type: The type of this DevicesLED.  # noqa: E501
        :type type: str
        :param color: The color of this DevicesLED.  # noqa: E501
        :type color: str
        :param mode: The mode of this DevicesLED.  # noqa: E501
        :type mode: str
        """
        self.swagger_types = {
            'type': str,
            'color': str,
            'mode': str
        }

        self.attribute_map = {
            'type': 'type',
            'color': 'color',
            'mode': 'mode'
        }

        self._type = type
        self._color = color
        self._mode = mode

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DevicesLED of this DevicesLED.  # noqa: E501
        :rtype: DevicesLED
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this DevicesLED.


        :return: The type of this DevicesLED.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DevicesLED.


        :param type: The type of this DevicesLED.
        :type type: str
        """
        allowed_values = ["button", "camera"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def color(self):
        """Gets the color of this DevicesLED.


        :return: The color of this DevicesLED.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this DevicesLED.


        :param color: The color of this DevicesLED.
        :type color: str
        """
        allowed_values = ["white", "red", "green", "blue", "yellow", "purple", "cyan"]  # noqa: E501
        if color not in allowed_values:
            raise ValueError(
                "Invalid value for `color` ({0}), must be one of {1}"
                .format(color, allowed_values)
            )

        self._color = color

    @property
    def mode(self):
        """Gets the mode of this DevicesLED.


        :return: The mode of this DevicesLED.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this DevicesLED.


        :param mode: The mode of this DevicesLED.
        :type mode: str
        """
        allowed_values = ["on", "off", "blink", "breath", "colorful"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode
